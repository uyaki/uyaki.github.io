[{"categories":["clash","ubuntu"],"content":"配置文件 ","date":"2024-01-11","objectID":"/posts/proxy/%E5%9C%A8linux%E4%B8%AD%E4%BD%BF%E7%94%A8clash/:1:0","tags":["clash","proxy","ubuntu"],"title":"在 Linux 中使用 Clash","uri":"/posts/proxy/%E5%9C%A8linux%E4%B8%AD%E4%BD%BF%E7%94%A8clash/"},{"categories":["clash","ubuntu"],"content":"配置文件存放目录 mkdir -p ~/.config/clash cd ~/.config/clash ","date":"2024-01-11","objectID":"/posts/proxy/%E5%9C%A8linux%E4%B8%AD%E4%BD%BF%E7%94%A8clash/:1:1","tags":["clash","proxy","ubuntu"],"title":"在 Linux 中使用 Clash","uri":"/posts/proxy/%E5%9C%A8linux%E4%B8%AD%E4%BD%BF%E7%94%A8clash/"},{"categories":["clash","ubuntu"],"content":"Country.mmdb 获取 当第一次启动 Clash 时（使用 ./clash 命令） 会自动下载（会下载至 $HOME/.config/clash 文件夹下）。自动下载可能会因网络原因较慢，可以访问Dreamacro/maxmind-geoip手动下载，上传到$HOME/.config/clash文件夹下 信息\rCountry.mmdb 文件利用 GeoIP2 服务能识别互联网用户的地点位置，以供规则分流时使用。\r","date":"2024-01-11","objectID":"/posts/proxy/%E5%9C%A8linux%E4%B8%AD%E4%BD%BF%E7%94%A8clash/:1:2","tags":["clash","proxy","ubuntu"],"title":"在 Linux 中使用 Clash","uri":"/posts/proxy/%E5%9C%A8linux%E4%B8%AD%E4%BD%BF%E7%94%A8clash/"},{"categories":["clash","ubuntu"],"content":"config.yaml 获取 一般的网络服务提供了 Clash 订阅链接，可以直接下载链接指向的文件内容，保存到 config.yaml 中。或者使用订阅转换服务（如该 链接，将其它订阅转换为 Clash 订阅。 这里推荐使用订阅转换服务，转换后的配置文件已添加更为强大的分流规则。就可以将 Clash 一直保持后台运行，自动分流，且会自动选择最优节点。 如果使用订阅转换服务，对于转换后的订阅链接，可以使用以下命令来下载配置文件： curl -o config.yaml 'longURL' 对于 suo.yt 短链接，需要重定向，因此使用以下命令来下载配置文件： curl -L -o config.yaml 'shortURL' ","date":"2024-01-11","objectID":"/posts/proxy/%E5%9C%A8linux%E4%B8%AD%E4%BD%BF%E7%94%A8clash/:1:3","tags":["clash","proxy","ubuntu"],"title":"在 Linux 中使用 Clash","uri":"/posts/proxy/%E5%9C%A8linux%E4%B8%AD%E4%BD%BF%E7%94%A8clash/"},{"categories":["clash","ubuntu"],"content":"docker-compose安装clash ","date":"2024-01-11","objectID":"/posts/proxy/%E5%9C%A8linux%E4%B8%AD%E4%BD%BF%E7%94%A8clash/:2:0","tags":["clash","proxy","ubuntu"],"title":"在 Linux 中使用 Clash","uri":"/posts/proxy/%E5%9C%A8linux%E4%B8%AD%E4%BD%BF%E7%94%A8clash/"},{"categories":["clash","ubuntu"],"content":"docker-compose文件 version: '3' services: clash: image: dreamacro/clash:latest container_name: clash volumes: - ~/.config/clash:/root/.config/clash ports: - \"7890:7890/tcp\" - \"7890:7890/udp\" # 如开启clash-dashboard 需暴露9090端口 # - \"9090:9090\" restart: always # 如开启clash-dashboard 取消注释 # clash-dashboard: # image: centralx/clash-dashboard # container_name: clash-dashboard # ports: # - \"7880:80\" # restart: always 信息\rclash的控制接口映射在 9090 端口上 使用dashboard 需要修改配置文件，修改external-controller的ip，设置密码 dashboard 映射在了宿主 7880 端口，默认只能通过 http 访问，可根据需要再做反向代理 ","date":"2024-01-11","objectID":"/posts/proxy/%E5%9C%A8linux%E4%B8%AD%E4%BD%BF%E7%94%A8clash/:2:1","tags":["clash","proxy","ubuntu"],"title":"在 Linux 中使用 Clash","uri":"/posts/proxy/%E5%9C%A8linux%E4%B8%AD%E4%BD%BF%E7%94%A8clash/"},{"categories":["clash","ubuntu"],"content":"开启dashboard需修改config.yaml vim ~/.config/clash/config.yaml # 原本为127.0.0.1，改为0.0.0.0 external-controller: '0.0.0.0:9090' # 在external-controller下一行，这个secret就是你Dashboard要使用的密钥 secret: 'your secret' ","date":"2024-01-11","objectID":"/posts/proxy/%E5%9C%A8linux%E4%B8%AD%E4%BD%BF%E7%94%A8clash/:2:2","tags":["clash","proxy","ubuntu"],"title":"在 Linux 中使用 Clash","uri":"/posts/proxy/%E5%9C%A8linux%E4%B8%AD%E4%BD%BF%E7%94%A8clash/"},{"categories":["clash","ubuntu"],"content":"dashboard 示例 ","date":"2024-01-11","objectID":"/posts/proxy/%E5%9C%A8linux%E4%B8%AD%E4%BD%BF%E7%94%A8clash/:2:3","tags":["clash","proxy","ubuntu"],"title":"在 Linux 中使用 Clash","uri":"/posts/proxy/%E5%9C%A8linux%E4%B8%AD%E4%BD%BF%E7%94%A8clash/"},{"categories":["clash","ubuntu"],"content":"运行 docker-compose up -d ","date":"2024-01-11","objectID":"/posts/proxy/%E5%9C%A8linux%E4%B8%AD%E4%BD%BF%E7%94%A8clash/:2:4","tags":["clash","proxy","ubuntu"],"title":"在 Linux 中使用 Clash","uri":"/posts/proxy/%E5%9C%A8linux%E4%B8%AD%E4%BD%BF%E7%94%A8clash/"},{"categories":["clash","ubuntu"],"content":"手动安装clash ","date":"2024-01-11","objectID":"/posts/proxy/%E5%9C%A8linux%E4%B8%AD%E4%BD%BF%E7%94%A8clash/:3:0","tags":["clash","proxy","ubuntu"],"title":"在 Linux 中使用 Clash","uri":"/posts/proxy/%E5%9C%A8linux%E4%B8%AD%E4%BD%BF%E7%94%A8clash/"},{"categories":["clash","ubuntu"],"content":"压缩包安装 对于 Ubuntu 一般使用 clash-linux-amd64 版本，下载clash wget latest_url 技巧\r如果直接 wget 速度较慢的话，可以本地下载完成后，使用 SFTP、SCP等方式 上传到 Linux 服务器。\r失败\r2024/01/11 clash 的github项目Dreamacro/clash为了紧急避险，目前已经删库跑路，之后是否会恢复有待观察。虽然github没了，但是网上还是有很多交流学习自用的，懂的都懂。\r解压 重命名为clash # 解压 gunzip clash-linux-amd64-latest.0.gz # 重命名 mv clash-linux-amd64-latest clash # 如需开机自启动，将 clash 移动到 /usr/bin/ 目录下，下文演示按此路径演示 mv clash-linux-amd64-latest /usr/bin/clash 赋予可执行权限 sudo chmod +x /usr/bin/clash 检查clash是否安装成功 clash -v ","date":"2024-01-11","objectID":"/posts/proxy/%E5%9C%A8linux%E4%B8%AD%E4%BD%BF%E7%94%A8clash/:3:1","tags":["clash","proxy","ubuntu"],"title":"在 Linux 中使用 Clash","uri":"/posts/proxy/%E5%9C%A8linux%E4%B8%AD%E4%BD%BF%E7%94%A8clash/"},{"categories":["clash","ubuntu"],"content":"Clash as a daemon 将 Clash 转变为系统服务，从而使得 Clash 实现常驻后台运行、开机自启动等。 配置 systemd 服务。在 /lib/systemd/system/ 目录下创建 clash@.service 文件 sudo vim /lib/systemd/system/clash@.service 写入以下内容(不用修改)并保存: [Unit] Description=A rule based proxy in Go for %i. After=network.target [Service] Type=simple User=%i Restart=on-abort ExecStart=/usr/bin/clash [Install] WantedBy=multi-user.target 重新加载 systemd 模块 systemctl daemon-reload 启动 clash 服务 systemctl start clash@uyaki 设置开机自启 systemctl enable clash@uyaki ","date":"2024-01-11","objectID":"/posts/proxy/%E5%9C%A8linux%E4%B8%AD%E4%BD%BF%E7%94%A8clash/:3:2","tags":["clash","proxy","ubuntu"],"title":"在 Linux 中使用 Clash","uri":"/posts/proxy/%E5%9C%A8linux%E4%B8%AD%E4%BD%BF%E7%94%A8clash/"},{"categories":["clash","ubuntu"],"content":"使用 利用 Export 命令使用代理。Clash 运行后，其在后台监听某一端口。根据 config 配置文可以查看到件Clash 代理端口（订阅转换后，端口为7890），设置系统代理命令为： export https_proxy=http://127.0.0.1:7890 export http_proxy=http://127.0.0.1:7890 export all_proxy=socks5://127.0.0.1:7890 可以将该命令添加到 ~/.bashrc 或 ~/.zshrc 中，登陆后该用户自动开启代理。 取消系统代理： unset http_proxy https_proxy all_proxy 当然，为了方便启动|关闭，可以设置成函数 ","date":"2024-01-11","objectID":"/posts/proxy/%E5%9C%A8linux%E4%B8%AD%E4%BD%BF%E7%94%A8clash/:4:0","tags":["clash","proxy","ubuntu"],"title":"在 Linux 中使用 Clash","uri":"/posts/proxy/%E5%9C%A8linux%E4%B8%AD%E4%BD%BF%E7%94%A8clash/"},{"categories":["clash","ubuntu"],"content":"bash or zsh vim ~/.bashrc或vim ~/.zshrc proxy () { export http_proxy=\"http://127.0.0.1:7890\" export https_proxy=\"http://127.0.0.1:7890\" export all_proxy=\"socks5://127.0.0.1:7890\" echo \"Clash Proxy:ON\" } noproxy () { unset http_proxy unset https_proxy unset all_proxy echo \"Clash Proxy:OFF\" } 记得 source ~/.bashrc 或 source ~/.zshrc 一下 ","date":"2024-01-11","objectID":"/posts/proxy/%E5%9C%A8linux%E4%B8%AD%E4%BD%BF%E7%94%A8clash/:4:1","tags":["clash","proxy","ubuntu"],"title":"在 Linux 中使用 Clash","uri":"/posts/proxy/%E5%9C%A8linux%E4%B8%AD%E4%BD%BF%E7%94%A8clash/"},{"categories":["clash","ubuntu"],"content":"fish vim ~/.config/fish/functions/proxy.fish function proxy set -xg all_proxy socks5://127.0.0.1:7890 set -xg http_proxy http://127.0.0.1:7890 set -xg https_proxy http://127.0.0.1:7890 echo \"Clash Proxy:ON\" end vim ~/.config/fish/functions/noproxy.fish function noproxy set -e all_proxy set -e http_proxy set -e https_proxy echo \"Clash Proxy:OFF\" end ","date":"2024-01-11","objectID":"/posts/proxy/%E5%9C%A8linux%E4%B8%AD%E4%BD%BF%E7%94%A8clash/:4:2","tags":["clash","proxy","ubuntu"],"title":"在 Linux 中使用 Clash","uri":"/posts/proxy/%E5%9C%A8linux%E4%B8%AD%E4%BD%BF%E7%94%A8clash/"},{"categories":["clash","ubuntu"],"content":"开启 \u0026 关闭 开启 proxy 关闭 noproxy ","date":"2024-01-11","objectID":"/posts/proxy/%E5%9C%A8linux%E4%B8%AD%E4%BD%BF%E7%94%A8clash/:4:3","tags":["clash","proxy","ubuntu"],"title":"在 Linux 中使用 Clash","uri":"/posts/proxy/%E5%9C%A8linux%E4%B8%AD%E4%BD%BF%E7%94%A8clash/"},{"categories":["command_line_tools"],"content":"Tmux 重要概念 使用 Tmux 的时候千万不要去背指令，所有的指令都可以在 .tmux.conf 配置文件中绑定自己顺手的快捷键，也可以配置开启鼠标。 在Tmux逻辑中，需要分清楚Server \u003e Session \u003e Window \u003e Pane这个大小和层级顺序是极其重要的，直接关系到工作效率： Server：是整个tmux的后台服务。有时候更改配置不生效，就要使用tmux kill-server来重启tmux。 Session 会话：是tmux的所有会话。我之前就错把这个session当成窗口用，造成了很多不便里。一般只要保存一个session就足够了。 Window 窗口：相当于一个工作区，包含很多分屏，可以针对每种任务分一个Window。如下载一个Window，编程一个window。 Pane 面板：是在Window里面的小分屏。最常用也最好用 了解了这个逻辑后，整个Tmux的使用和配置也就清晰了。 技巧\r我将自己的配置信息统一设置在了 $XDG_CONFIG_HOME 下， 所以，我的配置文件为 ~/.config/tmux/tmux.conf ","date":"2024-01-07","objectID":"/posts/command_line_tools/tmux/:1:0","tags":["tmux","command_line_tools"],"title":"Tmux","uri":"/posts/command_line_tools/tmux/"},{"categories":["command_line_tools"],"content":"安装 ## macOS brew install tmux ## ubuntu sudo apt-get install tmux ","date":"2024-01-07","objectID":"/posts/command_line_tools/tmux/:2:0","tags":["tmux","command_line_tools"],"title":"Tmux","uri":"/posts/command_line_tools/tmux/"},{"categories":["command_line_tools"],"content":"Tmux 常用命令 命令 功能 tmux [new -s 会话名 -n 窗口名] 启动新session tmux at [-t 会话名] 恢复session tmux ls 列出所有sessions tmux kill-session -t 会话名 关闭session tmux kill-server 关闭整个tmux服务器 ","date":"2024-01-07","objectID":"/posts/command_line_tools/tmux/:3:0","tags":["tmux","command_line_tools"],"title":"Tmux","uri":"/posts/command_line_tools/tmux/"},{"categories":["command_line_tools"],"content":"Tmux 常用内部命令 所谓内部命令，就是进入Tmux后，并按下前缀键后的命令，一般前缀键为Ctrl+b. ","date":"2024-01-07","objectID":"/posts/command_line_tools/tmux/:4:0","tags":["tmux","command_line_tools"],"title":"Tmux","uri":"/posts/command_line_tools/tmux/"},{"categories":["command_line_tools"],"content":"Session相关 前缀+命令 功能 ? 显示快捷键帮助文档 d 断开当前会话 D 选择要断开的会话 Ctrl+z 挂起当前会话 r 强制重载当前会话 s 显示会话列表用于选择并切换 : 进入命令行模式，此时可直接输入ls等命令 [ 进入复制模式，按q退出 ] 粘贴复制模式中复制的文本 ~ 列出提示信息缓存 ","date":"2024-01-07","objectID":"/posts/command_line_tools/tmux/:4:1","tags":["tmux","command_line_tools"],"title":"Tmux","uri":"/posts/command_line_tools/tmux/"},{"categories":["command_line_tools"],"content":"Window相关 前缀+命令 功能 c 新建窗口 \u0026 关闭当前窗口 0 ~ 9 切换到指定窗口 p 切换到上一窗口 n 切换到下一窗口 w 打开窗口列表，用于且切换窗口 , 重命名当前窗口 . 修改当前窗口编号（适用于窗口重新排序） f 快速定位到窗口（输入关键字匹配窗口名称） ","date":"2024-01-07","objectID":"/posts/command_line_tools/tmux/:4:2","tags":["tmux","command_line_tools"],"title":"Tmux","uri":"/posts/command_line_tools/tmux/"},{"categories":["command_line_tools"],"content":"Pane相关 前缀+命令 功能 \" 当前面板上下一分为二，下侧新建面板 % 当前面板左右一分为二，右侧新建面板 x 关闭当前面板（关闭前需输入y or n确认） z 最大化当前面板，再重复一次按键后恢复正常（v1.8版本新增） ! 将当前面板移动到新的窗口打开（原窗口中存在两个及以上面板有效） ; 切换到最后一次使用的面板 q 显示面板编号，在编号消失前输入对应的数字可切换到相应的面板 { 向前置换当前面板 } 向后置换当前面板 Ctrl+o 顺时针旋转当前窗口中的所有面板 方向键 移动光标切换面板 o 选择下一面板 空格键 在自带的面板布局中循环切换 Alt+方向键 以5个单元格为单位调整当前面板边缘 Ctrl+方向键 以1个单元格为单位调整当前面板边缘（Mac下） t 显示时钟 ","date":"2024-01-07","objectID":"/posts/command_line_tools/tmux/:4:3","tags":["tmux","command_line_tools"],"title":"Tmux","uri":"/posts/command_line_tools/tmux/"},{"categories":["command_line_tools"],"content":"配置文件 位置：~/.config/tmux/tmux.conf ","date":"2024-01-07","objectID":"/posts/command_line_tools/tmux/:5:0","tags":["tmux","command_line_tools"],"title":"Tmux","uri":"/posts/command_line_tools/tmux/"},{"categories":["command_line_tools"],"content":"激活 git clone git@github.com:uyaki/config.git cp config/tmux/tmux.conf ~/.config/tmux/tmux.conf 有3种激活方式： 重新加载：tmux source ~/.config/tmux/tmux.conf 在 tmux 窗口中，先按下 Ctrl+b 指令前缀，然后按下系统指令:，进入到命令模式后输入 source-file ~/.config/tmux/tmux.conf，回车后生效 重启 tmux：`restart tm ","date":"2024-01-07","objectID":"/posts/command_line_tools/tmux/:5:1","tags":["tmux","command_line_tools"],"title":"Tmux","uri":"/posts/command_line_tools/tmux/"},{"categories":["command_line_tools"],"content":"插件 ","date":"2024-01-07","objectID":"/posts/command_line_tools/tmux/:6:0","tags":["tmux","command_line_tools"],"title":"Tmux","uri":"/posts/command_line_tools/tmux/"},{"categories":["command_line_tools"],"content":"插件管理器 Github地址：tpm 安装： 克隆 git clone https://github.com/tmux-plugins/tpm ~/.config/tmux/plugins/tpm 修改配置文件 修改配置文件~/.config/tmux/tmux.conf setenv -g TMUX_PLUGIN_MANAGER_PATH '~/.config/tmux/plugins' # List of plugins set -g @plugin 'tmux-plugins/tpm' # 使用插件管理器 # 推荐的插件（请去每个插件的仓库下读一读使用教程） set -g @plugin 'seebi/tmux-colors-solarized' # 初始化 TPM 插件管理器 (放在配置文件的最后) run '~/.config/tmux/plugins/tpm/tpm' 重新加载 TMUX 环境，以便获取 TPM： tmux source ~/.config/tmux/tmux.conf 编号 快捷键 对应功能说明 1 prefix + I 安装配置文件中列出的插件(~/.config/tmux/tmux.conf) 2 prefix + U 卸载配置文件中列出的插件(~/.config/tmux/tmux.conf) 3 prefix + alt + u 移除并删除在配置文件没有列出的插件 ","date":"2024-01-07","objectID":"/posts/command_line_tools/tmux/:6:1","tags":["tmux","command_line_tools"],"title":"Tmux","uri":"/posts/command_line_tools/tmux/"},{"categories":["command_line_tools"],"content":"tmux-powerline 官方：erikw/tmux-powerline 在配置文件~/.config/tmux/tmux.conf中，添加 set -g @plugin 'erikw/tmux-powerline' 执行：\u003cprefox + I\u003e 生成配置文件 ~/.config/tmux/plugins/tmux-powerline/generate_rc.sh 复制生成的配置文件 mv ~/.config/tmux-powerline/config.sh.default ~/.config/tmux-powerline/config.sh 编辑它！ ","date":"2024-01-07","objectID":"/posts/command_line_tools/tmux/:6:2","tags":["tmux","command_line_tools"],"title":"Tmux","uri":"/posts/command_line_tools/tmux/"},{"categories":["npm"],"content":"右键 %VSCODE_PATH%/Code.exe -\u003e 属性 -\u003e 兼容性 -\u003e 以管理员身份运行此程序 ","date":"2023-04-16","objectID":"/posts/npm/npm%E5%AE%89%E8%A3%85%E5%A5%BD%E7%9A%84%E6%A8%A1%E5%9D%97%E6%97%A0%E6%B3%95%E5%9C%A8vscode%E4%B8%AD%E4%BD%BF%E7%94%A8/:0:0","tags":["npm"],"title":"Npm安装好的模块无法在vscode中使用","uri":"/posts/npm/npm%E5%AE%89%E8%A3%85%E5%A5%BD%E7%9A%84%E6%A8%A1%E5%9D%97%E6%97%A0%E6%B3%95%E5%9C%A8vscode%E4%B8%AD%E4%BD%BF%E7%94%A8/"},{"categories":["git"],"content":"用途 上传了一些敏感文件(例如密码) 上传了不想上传的文件(没及时或忘了加到.gitignore里的) 上传了大文件 需要一个方法, 永久的删除这些文件(包括该文件的历史记录). ","date":"2023-04-16","objectID":"/posts/git/%E4%BD%BF%E7%94%A8bfg-repo-cleaner%E6%B8%85%E7%90%86git%E4%BB%93%E5%BA%93/:1:0","tags":["git"],"title":"使用bfg Repo Cleaner清理git仓库","uri":"/posts/git/%E4%BD%BF%E7%94%A8bfg-repo-cleaner%E6%B8%85%E7%90%86git%E4%BB%93%E5%BA%93/"},{"categories":["git"],"content":"官网 bfg-repo-cleaner ","date":"2023-04-16","objectID":"/posts/git/%E4%BD%BF%E7%94%A8bfg-repo-cleaner%E6%B8%85%E7%90%86git%E4%BB%93%E5%BA%93/:2:0","tags":["git"],"title":"使用bfg Repo Cleaner清理git仓库","uri":"/posts/git/%E4%BD%BF%E7%94%A8bfg-repo-cleaner%E6%B8%85%E7%90%86git%E4%BB%93%E5%BA%93/"},{"categories":["git"],"content":"安装 方式一：scoop 安装 scoop install bfg scoop bucket add java scoop install java/openjdk 方式二：直接使用jar包 ","date":"2023-04-16","objectID":"/posts/git/%E4%BD%BF%E7%94%A8bfg-repo-cleaner%E6%B8%85%E7%90%86git%E4%BB%93%E5%BA%93/:3:0","tags":["git"],"title":"使用bfg Repo Cleaner清理git仓库","uri":"/posts/git/%E4%BD%BF%E7%94%A8bfg-repo-cleaner%E6%B8%85%E7%90%86git%E4%BB%93%E5%BA%93/"},{"categories":["git"],"content":"使用 ","date":"2023-04-16","objectID":"/posts/git/%E4%BD%BF%E7%94%A8bfg-repo-cleaner%E6%B8%85%E7%90%86git%E4%BB%93%E5%BA%93/:4:0","tags":["git"],"title":"使用bfg Repo Cleaner清理git仓库","uri":"/posts/git/%E4%BD%BF%E7%94%A8bfg-repo-cleaner%E6%B8%85%E7%90%86git%E4%BB%93%E5%BA%93/"},{"categories":["git"],"content":"mirror克隆 git clone --mirror git://example.com/your-repo.git ","date":"2023-04-16","objectID":"/posts/git/%E4%BD%BF%E7%94%A8bfg-repo-cleaner%E6%B8%85%E7%90%86git%E4%BB%93%E5%BA%93/:5:0","tags":["git"],"title":"使用bfg Repo Cleaner清理git仓库","uri":"/posts/git/%E4%BD%BF%E7%94%A8bfg-repo-cleaner%E6%B8%85%E7%90%86git%E4%BB%93%E5%BA%93/"},{"categories":["git"],"content":"使用方式 删除大文件 bfg --strip-blobs-bigger-than 100M --replace-text banned.txt your-repo.git 删除文件 ## 单个文件 bfg --delete-files xxx.xx your-repo.git ## 多个文件 bfg --delete-files {aaa,bbb}.xx your-repo.git 删除文件夹 bfg --delete-folders your-folders 替换字符 bfg --replace-text expression-file.txt your-repo.git 技巧\rexpression-file.txt 为密码替换模板文件 此文件中的每一行是一个匹配表达式。默认情况下，每一个表达式被视为一段文本常量，但你可以 通过指定 regex: 前缀来说明此表达式是一个正则表达式 指定 glob: 前缀。 每一个表达式的后面可以加上 ==\u003e 来指定匹配的文件应该被替换成什么（如果没有指定，就会被替换成默认值 ***REMOVED*** ） # 密码：123456 字符串替换成 ***REMOVED*** 密码：123456 # 密码：123456 字符串替换成 密码：******： 密码：123456 ==\u003e 密码：****** # 使用正则表达式： regex:密码：\\d+ ==\u003e 密码：****** ","date":"2023-04-16","objectID":"/posts/git/%E4%BD%BF%E7%94%A8bfg-repo-cleaner%E6%B8%85%E7%90%86git%E4%BB%93%E5%BA%93/:5:1","tags":["git"],"title":"使用bfg Repo Cleaner清理git仓库","uri":"/posts/git/%E4%BD%BF%E7%94%A8bfg-repo-cleaner%E6%B8%85%E7%90%86git%E4%BB%93%E5%BA%93/"},{"categories":["git"],"content":"提交 使用标准的git gc命令去除不需要的脏数据， git现在将这些脏数据视为多余的需求 cd your-repo.git git reflog expire --expire=now --all \u0026\u0026 git gc --prune=now --aggressive 提交 git push ","date":"2023-04-16","objectID":"/posts/git/%E4%BD%BF%E7%94%A8bfg-repo-cleaner%E6%B8%85%E7%90%86git%E4%BB%93%E5%BA%93/:5:2","tags":["git"],"title":"使用bfg Repo Cleaner清理git仓库","uri":"/posts/git/%E4%BD%BF%E7%94%A8bfg-repo-cleaner%E6%B8%85%E7%90%86git%E4%BB%93%E5%BA%93/"},{"categories":null,"content":"说明 佛系更新 ","date":"2023-04-16","objectID":"/about/:0:1","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"赞助支持 给我一个 Star 🌟 已经是对我最大的鼓励和支持了。 如果我的blog对你有帮助，请考虑给我买杯咖啡 ☕️。 谢谢大家！❤️\r❤️ 为爱发电 ⚡️\r赞赏\r支付宝\r微信\r黄** 通过 微信 打赏了 ¥6.66牛的!2023-04-02 15:04\r李** 通过 微信 打赏了 ¥8.88感谢!2022-10-02 00:04\r徐** 通过 微信 打赏了 ¥1.002020-02-09 23:53\r刘** 通过 微信 打赏了 ¥6.66加油!2020-02-07 00:22\r","date":"2023-04-16","objectID":"/about/:0:2","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"许可协议 Blog 根据 MIT 许可协议授权。 更多信息请查看 LICENSE 文件。 ","date":"2023-04-16","objectID":"/about/:0:3","tags":null,"title":"关于","uri":"/about/"},{"categories":["blog"],"content":"Usage ","date":"2023-04-16","objectID":"/posts/blog/hugo%E9%85%8D%E7%BD%AEalgolia%E6%90%9C%E7%B4%A2/:1:0","tags":["blog"],"title":"Hugo配置algolia搜索","uri":"/posts/blog/hugo%E9%85%8D%E7%BD%AEalgolia%E6%90%9C%E7%B4%A2/"},{"categories":["blog"],"content":"注册algolia 注册algolia账号 创建一个新的application。Settings（左下角）-\u003eGeneral-\u003eApplications-\u003eCreate Application 计划选择Free即可 创建Index，如xxx-blog 进入Settings（左下角）-\u003eTeam and Access-\u003eAPI Keys-\u003eYour API Keys，配置文件需要使用的 appID就是这里的Application ID key就是这里的Admin API Key ","date":"2023-04-16","objectID":"/posts/blog/hugo%E9%85%8D%E7%BD%AEalgolia%E6%90%9C%E7%B4%A2/:1:1","tags":["blog"],"title":"Hugo配置algolia搜索","uri":"/posts/blog/hugo%E9%85%8D%E7%BD%AEalgolia%E6%90%9C%E7%B4%A2/"},{"categories":["blog"],"content":"添加配置 在配置文件中使用，config.toml [params] [params.search] enable = true # 搜索引擎的类型 [\"lunr\", \"algolia\", \"fuse\"] # type of search engine [\"lunr\", \"algolia\", \"fuse\"] type = \"algolia\" [params.search.algolia] index = \"uyaki_blog\" appID = \"\" ## 填入 `Application ID` searchKey = \"\" ## 填入 `Admin API Key` 注意\r使用了FixIt主题，其他主题的配置可能略有差异\r","date":"2023-04-16","objectID":"/posts/blog/hugo%E9%85%8D%E7%BD%AEalgolia%E6%90%9C%E7%B4%A2/:1:2","tags":["blog"],"title":"Hugo配置algolia搜索","uri":"/posts/blog/hugo%E9%85%8D%E7%BD%AEalgolia%E6%90%9C%E7%B4%A2/"},{"categories":["blog"],"content":"上传 安装hugo-algolia npm install hugo-algolia -g 根目录下添加配置文件 config.yaml --- ## algolia配置，使用hugo-algolia -s上传 baseurl: \"/\" DefaultContentLanguage: \"zh-cn\" hasCJKLanguage: true languageCode: \"zh-cn\" title: \"uyaki.github.io\" theme: \"FixIt\" metaDataFormat: \"yaml\" algolia: index: \"uyaki_blog\" appID: \"\" ## 填入 `Application ID` key: \"\" ## 填入 `Admin API Key` --- 使用hugo-algolia上传 hugo-algolia -s 成功\r$ hugo-algolia -s JSON index file was created in public/algolia.json { updatedAt: ‘2023-04-16T07:59:07.752Z’, taskID: 1918050002 } 命令执行完成后会在public目录下面生成一个algolia.json的文件，此时在官网的 dashboard 中打开 Indices，可以看到数据了。 ","date":"2023-04-16","objectID":"/posts/blog/hugo%E9%85%8D%E7%BD%AEalgolia%E6%90%9C%E7%B4%A2/:1:3","tags":["blog"],"title":"Hugo配置algolia搜索","uri":"/posts/blog/hugo%E9%85%8D%E7%BD%AEalgolia%E6%90%9C%E7%B4%A2/"},{"categories":["blog"],"content":"hugo的LoveIt，FixIt主题都集成了admonition shorcode功能，可以比较方便的进行使用，语法和样式效果如下。 ","date":"2023-04-14","objectID":"/posts/blog/hugo%E4%BD%BF%E7%94%A8admonition%E7%BE%8E%E5%8C%96%E6%96%87%E7%AB%A0/:0:0","tags":["blog"],"title":"Hugo使用admonition美化文章","uri":"/posts/blog/hugo%E4%BD%BF%E7%94%A8admonition%E7%BE%8E%E5%8C%96%E6%96%87%E7%AB%A0/"},{"categories":["blog"],"content":"注意 {{\u003c admonition note \u003e}} 一个 **注意** 横幅 {{\u003c /admonition \u003e}} 注意\r一个 注意 横幅\r","date":"2023-04-14","objectID":"/posts/blog/hugo%E4%BD%BF%E7%94%A8admonition%E7%BE%8E%E5%8C%96%E6%96%87%E7%AB%A0/:1:0","tags":["blog"],"title":"Hugo使用admonition美化文章","uri":"/posts/blog/hugo%E4%BD%BF%E7%94%A8admonition%E7%BE%8E%E5%8C%96%E6%96%87%E7%AB%A0/"},{"categories":["blog"],"content":"技巧 {{\u003c admonition tip \u003e}} 一个 **技巧** 横幅 {{\u003c /admonition \u003e}} 技巧\r一个 提示 横幅\r","date":"2023-04-14","objectID":"/posts/blog/hugo%E4%BD%BF%E7%94%A8admonition%E7%BE%8E%E5%8C%96%E6%96%87%E7%AB%A0/:2:0","tags":["blog"],"title":"Hugo使用admonition美化文章","uri":"/posts/blog/hugo%E4%BD%BF%E7%94%A8admonition%E7%BE%8E%E5%8C%96%E6%96%87%E7%AB%A0/"},{"categories":["blog"],"content":"摘要 {{\u003c admonition abstract \u003e}} 一个 **摘要** 横幅 {{\u003c /admonition \u003e}} 摘要\r一个 摘要 横幅\r","date":"2023-04-14","objectID":"/posts/blog/hugo%E4%BD%BF%E7%94%A8admonition%E7%BE%8E%E5%8C%96%E6%96%87%E7%AB%A0/:3:0","tags":["blog"],"title":"Hugo使用admonition美化文章","uri":"/posts/blog/hugo%E4%BD%BF%E7%94%A8admonition%E7%BE%8E%E5%8C%96%E6%96%87%E7%AB%A0/"},{"categories":["blog"],"content":"信息 {{\u003c admonition info \u003e}} 一个 **信息** 横幅 {{\u003c /admonition \u003e}} 信息\r一个 信息 横幅\r","date":"2023-04-14","objectID":"/posts/blog/hugo%E4%BD%BF%E7%94%A8admonition%E7%BE%8E%E5%8C%96%E6%96%87%E7%AB%A0/:4:0","tags":["blog"],"title":"Hugo使用admonition美化文章","uri":"/posts/blog/hugo%E4%BD%BF%E7%94%A8admonition%E7%BE%8E%E5%8C%96%E6%96%87%E7%AB%A0/"},{"categories":["blog"],"content":"成功 {{\u003c admonition success \u003e}} 一个 **成功** 横幅 {{\u003c /admonition \u003e}} 成功\r一个 成功 横幅\r","date":"2023-04-14","objectID":"/posts/blog/hugo%E4%BD%BF%E7%94%A8admonition%E7%BE%8E%E5%8C%96%E6%96%87%E7%AB%A0/:5:0","tags":["blog"],"title":"Hugo使用admonition美化文章","uri":"/posts/blog/hugo%E4%BD%BF%E7%94%A8admonition%E7%BE%8E%E5%8C%96%E6%96%87%E7%AB%A0/"},{"categories":["blog"],"content":"问题 {{\u003c admonition question \u003e}} 一个 **问题** 横幅 {{\u003c /admonition \u003e}} 问题\r一个 问题 横幅\r","date":"2023-04-14","objectID":"/posts/blog/hugo%E4%BD%BF%E7%94%A8admonition%E7%BE%8E%E5%8C%96%E6%96%87%E7%AB%A0/:6:0","tags":["blog"],"title":"Hugo使用admonition美化文章","uri":"/posts/blog/hugo%E4%BD%BF%E7%94%A8admonition%E7%BE%8E%E5%8C%96%E6%96%87%E7%AB%A0/"},{"categories":["blog"],"content":"警告 {{\u003c admonition warning \u003e}} 一个 **警告** 横幅 {{\u003c /admonition \u003e}} 警告\r一个 警告 横幅\r","date":"2023-04-14","objectID":"/posts/blog/hugo%E4%BD%BF%E7%94%A8admonition%E7%BE%8E%E5%8C%96%E6%96%87%E7%AB%A0/:7:0","tags":["blog"],"title":"Hugo使用admonition美化文章","uri":"/posts/blog/hugo%E4%BD%BF%E7%94%A8admonition%E7%BE%8E%E5%8C%96%E6%96%87%E7%AB%A0/"},{"categories":["blog"],"content":"失败 {{\u003c admonition failure \u003e}} 一个 **失败** 横幅 {{\u003c /admonition \u003e}} 失败\r一个 失败 横幅\r","date":"2023-04-14","objectID":"/posts/blog/hugo%E4%BD%BF%E7%94%A8admonition%E7%BE%8E%E5%8C%96%E6%96%87%E7%AB%A0/:8:0","tags":["blog"],"title":"Hugo使用admonition美化文章","uri":"/posts/blog/hugo%E4%BD%BF%E7%94%A8admonition%E7%BE%8E%E5%8C%96%E6%96%87%E7%AB%A0/"},{"categories":["blog"],"content":"危险 {{\u003c admonition danger \u003e}} 一个 **危险** 横幅 {{\u003c /admonition \u003e}} 危险\r一个 危险 横幅\r","date":"2023-04-14","objectID":"/posts/blog/hugo%E4%BD%BF%E7%94%A8admonition%E7%BE%8E%E5%8C%96%E6%96%87%E7%AB%A0/:9:0","tags":["blog"],"title":"Hugo使用admonition美化文章","uri":"/posts/blog/hugo%E4%BD%BF%E7%94%A8admonition%E7%BE%8E%E5%8C%96%E6%96%87%E7%AB%A0/"},{"categories":["blog"],"content":"bug {{\u003c admonition bug \u003e}} 一个 **bug** 横幅 {{\u003c /admonition \u003e}} Bug\r一个 bug 横幅\r","date":"2023-04-14","objectID":"/posts/blog/hugo%E4%BD%BF%E7%94%A8admonition%E7%BE%8E%E5%8C%96%E6%96%87%E7%AB%A0/:10:0","tags":["blog"],"title":"Hugo使用admonition美化文章","uri":"/posts/blog/hugo%E4%BD%BF%E7%94%A8admonition%E7%BE%8E%E5%8C%96%E6%96%87%E7%AB%A0/"},{"categories":["blog"],"content":"示例 {{\u003c admonition example \u003e}} 一个 **示例** 横幅 {{\u003c /admonition \u003e}} 示例\r一个 示例 横幅\r","date":"2023-04-14","objectID":"/posts/blog/hugo%E4%BD%BF%E7%94%A8admonition%E7%BE%8E%E5%8C%96%E6%96%87%E7%AB%A0/:11:0","tags":["blog"],"title":"Hugo使用admonition美化文章","uri":"/posts/blog/hugo%E4%BD%BF%E7%94%A8admonition%E7%BE%8E%E5%8C%96%E6%96%87%E7%AB%A0/"},{"categories":["blog"],"content":"引用 {{\u003c admonition quote \u003e}} 一个 **引用** 横幅 {{\u003c /admonition \u003e}} 引用\r一个 引用 横幅\r","date":"2023-04-14","objectID":"/posts/blog/hugo%E4%BD%BF%E7%94%A8admonition%E7%BE%8E%E5%8C%96%E6%96%87%E7%AB%A0/:12:0","tags":["blog"],"title":"Hugo使用admonition美化文章","uri":"/posts/blog/hugo%E4%BD%BF%E7%94%A8admonition%E7%BE%8E%E5%8C%96%E6%96%87%E7%AB%A0/"},{"categories":["algorithm"],"content":"什么是子序列 子序列定义为：不改变剩余字符顺序的情况下，删除某些字符或者不删除任何字符形成的一个序列。 一旦涉及到子序列和最值，那几乎可以肯定，考察的是动态规划 技巧，时间复杂度一般都是 O(n^2)。 思路 ","date":"2023-04-14","objectID":"/posts/algorithm/%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98%E9%80%9A%E7%94%A8%E6%80%9D%E8%B7%AF/:0:0","tags":["algorithm","动态规划"],"title":"子序列问题通用思路","uri":"/posts/algorithm/%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98%E9%80%9A%E7%94%A8%E6%80%9D%E8%B7%AF/"},{"categories":["algorithm"],"content":"1. 一维DP数组 int n = array.length; int[] dp = new int[n]; for(int i = 1; i \u003c n; i++){ for(int j = 0; j \u003c n; j++){ dp[i] = 最值(dp[i],dp[j]+...) } } 示例\re.g.「最长递增子序列」\r找到一个给定序列的最长子序列的长度，使得子序列中的所有元素单调递增。 例如：{ 3，5，7，1，2，8 } 的 LIS 是 { 3，5，7，8 }，长度为 4。 class Solution { public int lengthOfLIS(int[] nums){ // dp[i] 表示以第i个元素为结尾时，最长上升子序列的长度 // 状态转移方程 // dp[i] = max(dp[j])+1,其中0\u003c=j\u003ci且num[i]\u003enum[j] if(nums.length == 0){ return 0; } int n = nums.length; int[] dp = new int[n]; dp[0] = 1; int max = 1; for(int i = 1;i \u003c n;i++){ dp[i] = 1; for(int j = 0;j \u003c i;j++){ if(nums[i] \u003e nums[j]){ dp[i] = Math.max(dp[i],dp[j]+1); } } max = Math.max(max,dp[i]); } return max; } } ","date":"2023-04-14","objectID":"/posts/algorithm/%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98%E9%80%9A%E7%94%A8%E6%80%9D%E8%B7%AF/:1:0","tags":["algorithm","动态规划"],"title":"子序列问题通用思路","uri":"/posts/algorithm/%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98%E9%80%9A%E7%94%A8%E6%80%9D%E8%B7%AF/"},{"categories":["algorithm"],"content":"2. 二维dp数组 int n = arr.length; int[][] dp = new dp[n][n]; for(int i = 0; i \u003c n; i++){ for(int j = 0; j \u003c n; j++){ if(arr[i] == arr[j]){ dp[i][j] = dp[i][j] + ... }else{ dp[i][j] = 最值(...) } } } 分两种情况 只涉及一个字符串 涉及两个字符串 ","date":"2023-04-14","objectID":"/posts/algorithm/%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98%E9%80%9A%E7%94%A8%E6%80%9D%E8%B7%AF/:2:0","tags":["algorithm","动态规划"],"title":"子序列问题通用思路","uri":"/posts/algorithm/%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98%E9%80%9A%E7%94%A8%E6%80%9D%E8%B7%AF/"},{"categories":["algorithm"],"content":"2.1 涉及两个字符串/数组 示例\re.g. 「最长公共子序列」\rdp数组的含义：在子数组 arr1[0..i] 和子数组 arr2[0..j] 中，我们要求的子序列（最长公共子序列）长度为 dp[i][j] 给定两个字符串 text1 和 text2， 返回这两个字符串的最长公共子序列的长度。 如果不存在公共子序列 ，返回 0 。 输入：text1 = \"abcde\", text2 = \"ace\" 输出：3 解释：最长公共子序列是 \"ace\" ，它的长度为 3 。 class Solution { public int longestCommonSubsequence(String text1, String text2) { char[] t1 = text1.toCharArray(); char[] t2 = text2.toCharArray(); int m = t1.length; int n = t2.length; // 创建 m+1行 n+1列的二维数组 // dp[i][j]表示 t1[0-i]和t2[0-j]的最长公共子序列长度 // 当i=0 时 ，t1[0:i] 为空对于任意j,dp[0][j] == 0 // 当j=0 时 , t2[0:j] 为空 对于任意i,dp[i][0] == 0 // 回归方程 // t1[i-1] = t2[j-1] 时，dp[i][j] = dp[i-1][j-1] + 1 // t1[i-1] != t2[j-1] 时，dp[i][j] = max(dp[i-1][j],dp[i][j-1]) int[][] dp = new int[m+1][n+1]; for(int i = 0;i \u003c= m;i++){ dp[i][0] = 0; } for(int i = 0;i \u003c= n;i++){ dp[0][i] = 0; } for(int i = 1;i \u003c= m;i++){ for(int j = 1;j \u003c= n;j++){ if(t1[i-1] == t2[j-1]){ dp[i][j] = dp[i-1][j-1] + 1; }else{ dp[i][j] = Math.max(dp[i][j-1],dp[i-1][j]); } } } return dp[m][n]; } } ","date":"2023-04-14","objectID":"/posts/algorithm/%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98%E9%80%9A%E7%94%A8%E6%80%9D%E8%B7%AF/:2:1","tags":["algorithm","动态规划"],"title":"子序列问题通用思路","uri":"/posts/algorithm/%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98%E9%80%9A%E7%94%A8%E6%80%9D%E8%B7%AF/"},{"categories":["algorithm"],"content":"2.2 只涉及一个字符串/数组 示例\re.g.「最长回文子序列」\rdp数组的含义：在子数组 array[i..j] 中，我们要求的子序列（最长回文子序列）的长度为 dp[i][j] 给你一个字符串 s ，找出其中最长的回文子序列，并返回该序列的长度。 输入：s = \"bbbab\" 输出：4 解释：一个可能的最长回文子序列为 \"bbbb\" 。 输入：s = \"cbbd\" 输出：2 解释：一个可能的最长回文子序列为 \"bb\" 。 class Solution { public int longestPalindromeSubseq(String s) { if(s == null || s.length() == 0){ return 0; } int n = s.length(); char[] chars = s.toCharArray(); // dp[i][j] 表示字符串 chars[i:j] 存在最长子序列的长度 // 当且仅当 0\u003c=i\u003c=j\u003cn时, dp[i][j]\u003e0; // 初始状态 // dp[i][j] = 1 , i = j; // 转移方程 // 1. chars[i] == chars[j] , dp[i][j] = dp[i+1]dp[j-1]+2; // 2. chars[i] != chars[j] , dp[i][j] = max(dp[i+1][j],dp[i][j-1]) int[][] dp = new int[n][n]; for(int i = n-1;i\u003e=0;i--){ dp[i][i] = 1; for(int j = i+1; j\u003cn;j++){ if(chars[i] == chars[j]){ dp[i][j] = dp[i+1][j-1] + 2; }else{ dp[i][j] = Math.max(dp[i+1][j],dp[i][j-1]); } } } return dp[0][n-1]; } } 参考 最长回文子序列：子序列问题通用思路 —— labuladong ","date":"2023-04-14","objectID":"/posts/algorithm/%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98%E9%80%9A%E7%94%A8%E6%80%9D%E8%B7%AF/:2:2","tags":["algorithm","动态规划"],"title":"子序列问题通用思路","uri":"/posts/algorithm/%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98%E9%80%9A%E7%94%A8%E6%80%9D%E8%B7%AF/"},{"categories":["blog"],"content":"hugo安装 # go安装 go install github.com/gohugoio/hugo@latest # 如果需要支持Sass/SCSS # 1. 设置go变量CGO_ENABLED=1 # 2. 执行 -tags extended go install -tags extended github.com/gohugoio/hugo@latest 警告\rFixIt使用了Sass必须执行 go install -tags extended github.com/gohugoio/hugo@latest，否则会报错 如果已经安装了hugo，一定要升级到新版本，旧版本有很多不兼容FixIt ","date":"2023-04-09","objectID":"/posts/blog/hugo+fixit/:1:0","tags":["blog"],"title":"Hugo+FixIt","uri":"/posts/blog/hugo+fixit/"},{"categories":["blog"],"content":"建站 hugo new site blog cd blog git init git submodule add https://github.com/hugo-fixit/FixIt.git themes/FixIt git submodule update ## 复制配置文件 mv config.toml config.old.toml cp themes/FixIt/config.toml config.toml ","date":"2023-04-09","objectID":"/posts/blog/hugo+fixit/:2:0","tags":["blog"],"title":"Hugo+FixIt","uri":"/posts/blog/hugo+fixit/"},{"categories":["blog"],"content":"修改 config.toml 最前面添加 title = \"\" baseURL = \"\" languageCode = \"zh-cn\" # en / zh-cn / ... (This field determines which i18n file to use) defaultContentLanguage = \"zh-cn\" # 是否包括中日韩文字 hasCJKLanguage = true theme = \"FixIt\" ","date":"2023-04-09","objectID":"/posts/blog/hugo+fixit/:3:0","tags":["blog"],"title":"Hugo+FixIt","uri":"/posts/blog/hugo+fixit/"},{"categories":["blog"],"content":"config.toml 完整配置 FixIt中文站 ","date":"2023-04-09","objectID":"/posts/blog/hugo+fixit/:4:0","tags":["blog"],"title":"Hugo+FixIt","uri":"/posts/blog/hugo+fixit/"},{"categories":["blog"],"content":"项目发起人shortcode（非必须） git submodule add https://github.com/Lruihao/hugo-shortcode-sponsor-log.git themes/shortcode-sponsor-log 配置 theme = [\"your-main-theme\", \"shortcode-sponsor-log\"] 复制数据文件，自行修改 cp themes/shortcode-sponsor-log/sponsor_log.yml.example data/sponsor_log.yml ","date":"2023-04-09","objectID":"/posts/blog/hugo+fixit/:5:0","tags":["blog"],"title":"Hugo+FixIt","uri":"/posts/blog/hugo+fixit/"},{"categories":["algorithm"],"content":"通常的字符串查找 逐个比较字符串，匹配失败重头再来。 时间复杂度：O(m*n) KMP 解决字符串查找 目的：匹配失败时，模式串回退，主串不用回退 在一个字符串（S）中查找一个子串（W）出现的位置。 时间复杂度：O(m+n) 空间复杂度：O(m)。 ","date":"2023-04-09","objectID":"/posts/algorithm/kmp%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/:0:0","tags":["algorithm"],"title":"KMP算法总结","uri":"/posts/algorithm/kmp%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"},{"categories":["algorithm"],"content":"示例 text： abcxabcdabxabcdabcdabcy pattern: abcdabcy ","date":"2023-04-09","objectID":"/posts/algorithm/kmp%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/:1:0","tags":["algorithm"],"title":"KMP算法总结","uri":"/posts/algorithm/kmp%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"},{"categories":["algorithm"],"content":"KMP思路 这里的p_start通常情况下，被描述为next数组，它的含义是：字符串在当前位置存在前缀后缀匹配数组的长度，也可以描述为匹配度。 当出现不匹配时，只需要知道前面的字符串的匹配度，就可以知道，下一次匹配时，pattern的开始查找位置。 信息\r如 step4时， p_index = 7时，pattern[7] = j 与text[18] 不匹配 此时前面的匹配度 =next[p_index - 1] = 3 匹配度=3，说明对于主串text，前面 t_index = 18前面的3个字符和pattern前面的3个字符一定是匹配的 所以，继续查找时，d_index 还是18 不需要回退，只需要从p_index = 3开始匹配即可，如step5 所示 ","date":"2023-04-09","objectID":"/posts/algorithm/kmp%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/:2:0","tags":["algorithm"],"title":"KMP算法总结","uri":"/posts/algorithm/kmp%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"},{"categories":["algorithm"],"content":"如何获取next数组 ","date":"2023-04-09","objectID":"/posts/algorithm/kmp%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/:3:0","tags":["algorithm"],"title":"KMP算法总结","uri":"/posts/algorithm/kmp%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"},{"categories":["algorithm"],"content":"pattern为abcdabcyab时匹配度表 index 0 1 2 3 4 5 6 7 8 9 pattern a b c d a b c y a b next 0 0 0 0 1 2 3 0 1 2 int[] getNext(String pattern) { int[] next= new int[pattern.length()]; int j= 0; for (int i = 1; i \u003c pattern.length(); i++) { while (j\u003e 0 \u0026\u0026 pattern.charAt(j) != pattern.charAt(i)) { j= next[j- 1]; // 在子对称里面查找是否有能复用的对称 } if (pattern.charAt(j) == pattern.charAt(i)) { j++; } next[i] = j; } return next; } ","date":"2023-04-09","objectID":"/posts/algorithm/kmp%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/:3:1","tags":["algorithm"],"title":"KMP算法总结","uri":"/posts/algorithm/kmp%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"},{"categories":["algorithm"],"content":"pattern为abcxabcabcxabcxb时匹配度表 index 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 pattern a b c x a b c a b c x a b c x b next 0 0 0 0 1 2 3 1 2 3 4 5 6 7 4 0 index = 14时，前面的对称度是7 。j = 7，p[14] = ‘x’ ，此时， 如果要存在对称性，那么对称程度肯定比前面这个c 的对称程度小，如果大那么x就继承前面的对称性了。 要找更小的对称，必然在对称内部还存在子对称，而且这个x必须紧接着在子对称之后。 ","date":"2023-04-09","objectID":"/posts/algorithm/kmp%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/:3:2","tags":["algorithm"],"title":"KMP算法总结","uri":"/posts/algorithm/kmp%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"},{"categories":["algorithm"],"content":"KMP 完整代码 class Soultion{ // 在文本 text 中寻找模式串 pattern，返回所有匹配的位置开头 List\u003cInteger\u003e search(String text, String pattern) { List\u003cInteger\u003e positions = new ArrayList\u003c\u003e(); int[] next= getNext(pattern); int count = 0; for (int i = 0; i \u003c text.length(); i++) { while (count \u003e 0 \u0026\u0026 pattern.charAt(count) != text.charAt(i)) { // count 回退 count = next[count - 1]; } if (pattern.charAt(count) == text.charAt(i)) { count++; } if (count == pattern.length()) { positions.add(i - pattern.length() + 1); //找到一个就回退 count = next[count - 1]; } } return positions; } int[] getNext(String pattern) { int[] next= new int[pattern.length()]; int j= 0; for (int i = 1; i \u003c pattern.length(); i++) { while (j\u003e 0 \u0026\u0026 pattern.charAt(j) != pattern.charAt(i)) { j= next[j- 1]; } if (pattern.charAt(j) == pattern.charAt(i)) { j++; } next[i] = j; } return next; } } ","date":"2023-04-09","objectID":"/posts/algorithm/kmp%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/:4:0","tags":["algorithm"],"title":"KMP算法总结","uri":"/posts/algorithm/kmp%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"},{"categories":["algorithm"],"content":"解说视频 ","date":"2023-04-09","objectID":"/posts/algorithm/kmp%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/:5:0","tags":["algorithm"],"title":"KMP算法总结","uri":"/posts/algorithm/kmp%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"},{"categories":["dotfiles"],"content":"ubuntu-install ubuntu-install 使用 ssh连接服务器 注册ssh到authorized_keys 切换到管理员角色 Clone project 在本地安装字体（非必须） 安装clash（非必须） 安装 ranger ","date":"2023-02-09","objectID":"/posts/dotfiles/ubuntu%E6%96%B0%E6%9C%BAdotfile/:0:0","tags":["dotfiles"],"title":"Ubuntu新机dotfile","uri":"/posts/dotfiles/ubuntu%E6%96%B0%E6%9C%BAdotfile/"},{"categories":["dotfiles"],"content":"使用 ssh连接服务器 ## 连接服务器 $ ssh -o ServerAliveInterval=180 -o ServerAliveCountMax=3 -o KeepAlive=yes [user]@[ip] ## 如果你是重装服务器可能还需要重置下ssh $ ssh-keygen -R [ip] ","date":"2023-02-09","objectID":"/posts/dotfiles/ubuntu%E6%96%B0%E6%9C%BAdotfile/:1:0","tags":["dotfiles"],"title":"Ubuntu新机dotfile","uri":"/posts/dotfiles/ubuntu%E6%96%B0%E6%9C%BAdotfile/"},{"categories":["dotfiles"],"content":"注册ssh到authorized_keys 本机操作 $ cat ~/.ssh/id_rsa.pub 服务器操作 $ echo '\u003cid_rsa.pub\u003e' \u003e\u003e ~/.ssh/authorized_keys 注意，此时的ssh信息是在 ubuntu 用户下完成，如果需要 root 权限，需要切换到 root 执行 ","date":"2023-02-09","objectID":"/posts/dotfiles/ubuntu%E6%96%B0%E6%9C%BAdotfile/:2:0","tags":["dotfiles"],"title":"Ubuntu新机dotfile","uri":"/posts/dotfiles/ubuntu%E6%96%B0%E6%9C%BAdotfile/"},{"categories":["dotfiles"],"content":"切换到管理员角色 ## 切换到root下 $ sudo su ## `~` =\u003e `/root` $ cd ~ ","date":"2023-02-09","objectID":"/posts/dotfiles/ubuntu%E6%96%B0%E6%9C%BAdotfile/:3:0","tags":["dotfiles"],"title":"Ubuntu新机dotfile","uri":"/posts/dotfiles/ubuntu%E6%96%B0%E6%9C%BAdotfile/"},{"categories":["dotfiles"],"content":"Clone project $ git clone https://github.com/uyaki/dotfiles.git ~/dotfiles 文件默认操作路径 /root/dotfiles $ cd dotfiles $ sudo chmod 777 ./linux/*-install.sh $ ./linux/ubuntu-install.sh 其实不建议执行脚本，因为执行过程过长，不利于问题及时解决。 建议手动安需复制执行语句执行 ","date":"2023-02-09","objectID":"/posts/dotfiles/ubuntu%E6%96%B0%E6%9C%BAdotfile/:4:0","tags":["dotfiles"],"title":"Ubuntu新机dotfile","uri":"/posts/dotfiles/ubuntu%E6%96%B0%E6%9C%BAdotfile/"},{"categories":["dotfiles"],"content":"在本地安装字体（非必须） 使用zsh主题powerlevel10k，需要在客户端下载字体 hack-nerd-font 具体查看：字体字体安装教程 如需修改 powerlevel10k 配置，执行： $ p10k configure ","date":"2023-02-09","objectID":"/posts/dotfiles/ubuntu%E6%96%B0%E6%9C%BAdotfile/:5:0","tags":["dotfiles"],"title":"Ubuntu新机dotfile","uri":"/posts/dotfiles/ubuntu%E6%96%B0%E6%9C%BAdotfile/"},{"categories":["dotfiles"],"content":"安装clash（非必须） 具体查看：clash in docker ","date":"2023-02-09","objectID":"/posts/dotfiles/ubuntu%E6%96%B0%E6%9C%BAdotfile/:6:0","tags":["dotfiles"],"title":"Ubuntu新机dotfile","uri":"/posts/dotfiles/ubuntu%E6%96%B0%E6%9C%BAdotfile/"},{"categories":["dotfiles"],"content":"安装 ranger 具体查看：ranger ","date":"2023-02-09","objectID":"/posts/dotfiles/ubuntu%E6%96%B0%E6%9C%BAdotfile/:7:0","tags":["dotfiles"],"title":"Ubuntu新机dotfile","uri":"/posts/dotfiles/ubuntu%E6%96%B0%E6%9C%BAdotfile/"},{"categories":["dotfiles"],"content":"windows 安装说明 windows 安装说明 winget 安装 chocolatey 安装 安裝wsl 步骤1 打开windows的wsl功能。 步骤2 启用虚拟机功能 步骤3 下载 Linux 内核更新包 步骤4 选择并安装linux 步骤5 登录退出 OpenSSL windows Terminal 下载字体Meslo ","date":"2023-02-09","objectID":"/posts/dotfiles/window%E6%96%B0%E6%9C%BAdotfile/:0:0","tags":["dotfiles"],"title":"Window新机dotfile","uri":"/posts/dotfiles/window%E6%96%B0%E6%9C%BAdotfile/"},{"categories":["dotfiles"],"content":"winget 安装 请到 winget官方 查看最新可下载版本 ## 下载 $ curl.exe -L -o $HOME/Downloads/winget.msixbundle https://github.com/microsoft/winget-cli/releases/download/v1.2.10271/Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle ## 安装winget $ msiexec winget.msixbundle ## 查看版本 $ winget -v ","date":"2023-02-09","objectID":"/posts/dotfiles/window%E6%96%B0%E6%9C%BAdotfile/:1:0","tags":["dotfiles"],"title":"Window新机dotfile","uri":"/posts/dotfiles/window%E6%96%B0%E6%9C%BAdotfile/"},{"categories":["dotfiles"],"content":"chocolatey 安装 chocolatey 官网 管理员身份运行powershell $ Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1')) ","date":"2023-02-09","objectID":"/posts/dotfiles/window%E6%96%B0%E6%9C%BAdotfile/:2:0","tags":["dotfiles"],"title":"Window新机dotfile","uri":"/posts/dotfiles/window%E6%96%B0%E6%9C%BAdotfile/"},{"categories":["dotfiles"],"content":"安裝wsl ","date":"2023-02-09","objectID":"/posts/dotfiles/window%E6%96%B0%E6%9C%BAdotfile/:3:0","tags":["dotfiles"],"title":"Window新机dotfile","uri":"/posts/dotfiles/window%E6%96%B0%E6%9C%BAdotfile/"},{"categories":["dotfiles"],"content":"步骤1 打开windows的wsl功能。 方式一：使用命令行（推荐） 以管理员身份打开 PowerShell（“开始”菜单 -\u003e PowerShell -\u003e 单击右键 -\u003e 以管理员身份运行）并运行： $ dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart 方式二：使用图形界面 具体操作路径：控制面板 -\u003e 所有控制面板项 -\u003e 程序和功能 -\u003e 启用或关闭Windows功能 -\u003e 勾选✔️适用于Linux的Windows子系统。 ","date":"2023-02-09","objectID":"/posts/dotfiles/window%E6%96%B0%E6%9C%BAdotfile/:3:1","tags":["dotfiles"],"title":"Window新机dotfile","uri":"/posts/dotfiles/window%E6%96%B0%E6%9C%BAdotfile/"},{"categories":["dotfiles"],"content":"步骤2 启用虚拟机功能 安装 WSL 2 之前，必须启用“虚拟机平台”可选功能。 计算机需要虚拟化功能才能使用此功能。 以管理员身份打开 PowerShell 并运行： $ dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart 重新启动计算机，以完成 WSL 安装并更新到 WSL 2。 ","date":"2023-02-09","objectID":"/posts/dotfiles/window%E6%96%B0%E6%9C%BAdotfile/:3:2","tags":["dotfiles"],"title":"Window新机dotfile","uri":"/posts/dotfiles/window%E6%96%B0%E6%9C%BAdotfile/"},{"categories":["dotfiles"],"content":"步骤3 下载 Linux 内核更新包 步骤2后重新启动计算机后才可以设置wsl2 下载 ## 使用PowerShell的WebClient下载 $ $client = new-object System.Net.WebClient $ $client.DownloadFile('https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi',$HOME+'\\Downloads\\wsl_update_x64.msi') ## curl下载 $ curl.exe -L -o $HOME/Downloads/wsl_update_x64.msi https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi 安装 ## 进入下载目录 $ cd $HOME\\Downloads ## 安装 $ msiexec /package wsl_update_x64.msi ## 设置默认版本 $ wsl --set-default-version 2 ","date":"2023-02-09","objectID":"/posts/dotfiles/window%E6%96%B0%E6%9C%BAdotfile/:3:3","tags":["dotfiles"],"title":"Window新机dotfile","uri":"/posts/dotfiles/window%E6%96%B0%E6%9C%BAdotfile/"},{"categories":["dotfiles"],"content":"步骤4 选择并安装linux wsl官方文档 # 查看可安装版本 wsl --list --online $ wsl -l -o # 安装 ubuntu ## 下载完成之后，会要求配置初始的用户名和密码。 $ wsl --install -d Ubuntu # 升级成 wsl2 ## WSL 2 是适用于 Linux 的 Windows 子系统体系结构的一个新版本，它支持适用于 Linux 的 Windows 子系统在 Windows 上运行 ELF64 Linux 二进制文件。 它的主要目标是提高文件系统性能，以及添加完全的系统调用兼容性 ## 可以使用 wsl -l -v 查看是否需要更换wsl2 这可能是因为你在升级wsl2之前就已经安装了子系统 $ wsl --set-version Ubuntu 2 ","date":"2023-02-09","objectID":"/posts/dotfiles/window%E6%96%B0%E6%9C%BAdotfile/:3:4","tags":["dotfiles"],"title":"Window新机dotfile","uri":"/posts/dotfiles/window%E6%96%B0%E6%9C%BAdotfile/"},{"categories":["dotfiles"],"content":"步骤5 登录退出 $ wsl 之后的操作见 ubuntu-install.md ","date":"2023-02-09","objectID":"/posts/dotfiles/window%E6%96%B0%E6%9C%BAdotfile/:3:5","tags":["dotfiles"],"title":"Window新机dotfile","uri":"/posts/dotfiles/window%E6%96%B0%E6%9C%BAdotfile/"},{"categories":["dotfiles"],"content":"OpenSSL TODO ","date":"2023-02-09","objectID":"/posts/dotfiles/window%E6%96%B0%E6%9C%BAdotfile/:4:0","tags":["dotfiles"],"title":"Window新机dotfile","uri":"/posts/dotfiles/window%E6%96%B0%E6%9C%BAdotfile/"},{"categories":["dotfiles"],"content":"windows Terminal ","date":"2023-02-09","objectID":"/posts/dotfiles/window%E6%96%B0%E6%9C%BAdotfile/:5:0","tags":["dotfiles"],"title":"Window新机dotfile","uri":"/posts/dotfiles/window%E6%96%B0%E6%9C%BAdotfile/"},{"categories":["dotfiles"],"content":"下载字体Meslo 字体字体安装教程 ","date":"2023-02-09","objectID":"/posts/dotfiles/window%E6%96%B0%E6%9C%BAdotfile/:5:1","tags":["dotfiles"],"title":"Window新机dotfile","uri":"/posts/dotfiles/window%E6%96%B0%E6%9C%BAdotfile/"},{"categories":["go"],"content":"如下图所示，设置 go -\u003e Go Modules -\u003e ✅ Enable Go modules integration -\u003e Environment: 输入 GOPROXY=https://goproxy.cn,direct ","date":"2022-12-12","objectID":"/posts/go/goland%E5%9C%A8go_modules%E6%A8%A1%E5%BC%8F%E4%B8%8B%E6%97%A0%E6%B3%95%E8%AF%86%E5%88%AB%E6%9C%AC%E5%9C%B0%E4%BE%9D%E8%B5%96%E5%8C%85/:0:0","tags":["go"],"title":"Goland在go_modules模式下无法识别本地依赖包","uri":"/posts/go/goland%E5%9C%A8go_modules%E6%A8%A1%E5%BC%8F%E4%B8%8B%E6%97%A0%E6%B3%95%E8%AF%86%E5%88%AB%E6%9C%AC%E5%9C%B0%E4%BE%9D%E8%B5%96%E5%8C%85/"},{"categories":["go"],"content":"解决 open /usr/local/go/pkg/darwin_amd64/runtime/cgo.a: permission denied $ sudo chown -R [用户名] /usr/local/go/pkg/darwin_amd64/ $ whoami uyaki $ sudo chown -R uyaki /usr/local/go/pkg/darwin_amd64/ ","date":"2022-12-12","objectID":"/posts/go/mac%E4%B8%8Bpermission_denied/:0:0","tags":["go"],"title":"Mac下go访问时出现permission_denied","uri":"/posts/go/mac%E4%B8%8Bpermission_denied/"},{"categories":["window"],"content":"官网 QTTabBar ","date":"2022-09-15","objectID":"/posts/windows/windows%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8%E4%BC%98%E5%8C%96%E7%A5%9E%E5%99%A8qttabbar/:1:0","tags":["window"],"title":"Windows资源管理器优化神器QTTabBar","uri":"/posts/windows/windows%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8%E4%BC%98%E5%8C%96%E7%A5%9E%E5%99%A8qttabbar/"},{"categories":["window"],"content":"安装 按流程指引直接下一步 ","date":"2022-09-15","objectID":"/posts/windows/windows%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8%E4%BC%98%E5%8C%96%E7%A5%9E%E5%99%A8qttabbar/:2:0","tags":["window"],"title":"Windows资源管理器优化神器QTTabBar","uri":"/posts/windows/windows%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8%E4%BC%98%E5%8C%96%E7%A5%9E%E5%99%A8qttabbar/"},{"categories":["window"],"content":"启动 新打开一个「资源管理器」，也就是随意打开一个文件夹。 点击顶栏的「查看」 点击最右边的「选项」 选择「QTTabBar」 ","date":"2022-09-15","objectID":"/posts/windows/windows%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8%E4%BC%98%E5%8C%96%E7%A5%9E%E5%99%A8qttabbar/:3:0","tags":["window"],"title":"Windows资源管理器优化神器QTTabBar","uri":"/posts/windows/windows%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8%E4%BC%98%E5%8C%96%E7%A5%9E%E5%99%A8qttabbar/"},{"categories":["window"],"content":"切换语言 鼠标右击标签栏； 点击「QTTabBar Options…」打开 QTTabBar 的设置页面； 在「常规选项」的界面中找到「Language」一栏； 点击「Download language file…」按钮，然后会弹出语言下载页面 下载到电脑，然后在 Language 处选择刚刚下载好的语言文件，点击确定后就能成功切换到中文了； 重启资源管理器 ","date":"2022-09-15","objectID":"/posts/windows/windows%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8%E4%BC%98%E5%8C%96%E7%A5%9E%E5%99%A8qttabbar/:4:0","tags":["window"],"title":"Windows资源管理器优化神器QTTabBar","uri":"/posts/windows/windows%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8%E4%BC%98%E5%8C%96%E7%A5%9E%E5%99%A8qttabbar/"},{"categories":["window"],"content":"功能 多窗口 shift预览（需要设置） 文件夹预览 标签分组 ","date":"2022-09-15","objectID":"/posts/windows/windows%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8%E4%BC%98%E5%8C%96%E7%A5%9E%E5%99%A8qttabbar/:5:0","tags":["window"],"title":"Windows资源管理器优化神器QTTabBar","uri":"/posts/windows/windows%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8%E4%BC%98%E5%8C%96%E7%A5%9E%E5%99%A8qttabbar/"},{"categories":["macOS"],"content":"解决无法联网的问题: vim /Library/Preferences/Parallels/network.desktop.xml \u003c!-- \u003cUseKextless\u003e-1\u003c/UseKextless\u003e改为 1--\u003e \u003cUseKextless\u003e0\u003c/UseKextless\u003e 解决USB无法识别问题: vim /Library/Preferences/Parallels/dispatcher.desktop.xml \u003c!-- 找到 \u003cUsb\u003e0\u003c/Usb\u003e ，修改为 1 --\u003e \u003cUsb\u003e1\u003c/Usb\u003e 修改后，重启 Parallels Desktop以及windows，即完美解决以上问题。 ","date":"2022-04-01","objectID":"/posts/mac/%E8%A7%A3%E5%86%B3pd%E7%9A%84bootcamp%E4%B8%ADwindows%E6%97%A0%E6%B3%95%E8%81%94%E7%BD%91%E7%9A%84%E9%97%AE%E9%A2%98/:1:0","tags":["macOS"],"title":"解决PD的bootcamp中windows无法联网的问题","uri":"/posts/mac/%E8%A7%A3%E5%86%B3pd%E7%9A%84bootcamp%E4%B8%ADwindows%E6%97%A0%E6%B3%95%E8%81%94%E7%BD%91%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["window"],"content":"设置bypass Clash -\u003e Settings -\u003e System Proxy -\u003e Bypass Domain/IPNet bypass: - localhost - 127.* - 10.* - 172.16.* - 172.17.* - 172.18.* - 172.19.* - 172.20.* - 172.21.* - 172.22.* - 172.23.* - 172.24.* - 172.25.* - 172.26.* - 172.27.* - 172.28.* - 172.29.* - 172.30.* - 172.31.* - 192.168.* - \u003clocal\u003e - \"*.bing.com\" - \"*.microsoft.com\" - \"*.bing.com\" - \"*.microsoft.com\" # Steam中国大陆地区游戏下载 - \"steampipe.steamcontent.tnkjmec.com\" #华为云 - \"st.dl.eccdnx.com\" #白山云 - \"st.dl.bscstorage.net\" - \"st.dl.pinyuncloud.com\" - \"dl.steam.clngaa.com\" #金山云 - \"cdn.mileweb.cs.steampowered.com.8686c.com\" #网宿云 - \"cdn-ws.content.steamchina.com\" - \"cdn-qc.content.steamchina.com\" #腾讯云 - \"cdn-ali.content.steamchina.com\" #阿里云 # Steam非中国大陆地区游戏下载/社区实况直播 - \"*.steamcontent.com\" # Battle.net战网中国大陆地区游戏下载 - \"client05.pdl.wow.battlenet.com.cn\" #华为云 - \"client02.pdl.wow.battlenet.com.cn\" #网宿云 # Epic Games中国大陆地区游戏下载 - \"epicgames-download1-1251447533.file.myqcloud.com\" # Rockstar Launcher客户端更新/游戏更新/游戏下载 - \"gamedownloads-rockstargames-com.akamaized.net\" ","date":"2022-04-01","objectID":"/posts/windows/steam%E5%A6%82%E4%BD%95%E7%BB%95%E8%BF%87clash%E7%9A%84%E5%85%A8%E5%B1%80%E4%BB%A3%E7%90%86/:1:0","tags":["window"],"title":"Steam如何绕过clash的全局代理","uri":"/posts/windows/steam%E5%A6%82%E4%BD%95%E7%BB%95%E8%BF%87clash%E7%9A%84%E5%85%A8%E5%B1%80%E4%BB%A3%E7%90%86/"},{"categories":["server"],"content":"sftp 交互式的文件传输程序，命令的运行和使用方式与 ftp 命令相似，但是，sftp 命令对传输的所有信息使用 ssh 加密，它还支持公钥认证和压缩等功能。 ","date":"2020-04-22","objectID":"/posts/server/%E4%BD%BF%E7%94%A8sftp%E4%BB%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/:1:0","tags":["server"],"title":"使用sftp从服务器下载文件","uri":"/posts/server/%E4%BD%BF%E7%94%A8sftp%E4%BB%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/"},{"categories":["server"],"content":"语法 sftp(选项)(参数) ","date":"2020-04-22","objectID":"/posts/server/%E4%BD%BF%E7%94%A8sftp%E4%BB%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/:2:0","tags":["server"],"title":"使用sftp从服务器下载文件","uri":"/posts/server/%E4%BD%BF%E7%94%A8sftp%E4%BB%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/"},{"categories":["server"],"content":"选项 -B：指定传输文件时缓冲区的大小； -l：使用ssh协议版本1； -b：指定批处理文件； -C：使用压缩； -o：指定ssh选项； -F：指定ssh配置文件； -R：指定一次可以容忍多少请求数； -v：升高日志等级。 ","date":"2020-04-22","objectID":"/posts/server/%E4%BD%BF%E7%94%A8sftp%E4%BB%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/:2:1","tags":["server"],"title":"使用sftp从服务器下载文件","uri":"/posts/server/%E4%BD%BF%E7%94%A8sftp%E4%BB%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/"},{"categories":["server"],"content":"参数 目标主机：指定 sftp 服务器 ip 地址或者主机名。 ","date":"2020-04-22","objectID":"/posts/server/%E4%BD%BF%E7%94%A8sftp%E4%BB%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/:2:2","tags":["server"],"title":"使用sftp从服务器下载文件","uri":"/posts/server/%E4%BD%BF%E7%94%A8sftp%E4%BB%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/"},{"categories":["server"],"content":"示例 $ sftp -Pport user@ip ","date":"2020-04-22","objectID":"/posts/server/%E4%BD%BF%E7%94%A8sftp%E4%BB%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/:2:3","tags":["server"],"title":"使用sftp从服务器下载文件","uri":"/posts/server/%E4%BD%BF%E7%94%A8sftp%E4%BB%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/"},{"categories":["server"],"content":"下载与上传 # cd到服务器指定目录 sftp\u003e cd xxx # 本地cd到要下载的目标位置，所有命令+l是操作本机 sftp\u003e lcd ~/Downloads # 下载(获取 远程 本地) sftp\u003e get -r ./* ./ # 上传（推送 本地 远程） sftp\u003e put /local/path/file.pdf /xxx/xxx/xxx/ ","date":"2020-04-22","objectID":"/posts/server/%E4%BD%BF%E7%94%A8sftp%E4%BB%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/:3:0","tags":["server"],"title":"使用sftp从服务器下载文件","uri":"/posts/server/%E4%BD%BF%E7%94%A8sftp%E4%BB%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/"},{"categories":["server"],"content":"本机传送id_rsa.pub $ scp .ssh/id_rsa.pub user@ip:/root/id_rsa.pub ","date":"2020-04-19","objectID":"/posts/server/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95centos7/:1:0","tags":["server"],"title":"SSH免密登录CentOS7","uri":"/posts/server/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95centos7/"},{"categories":["server"],"content":"服务器 $ cat id_rsa.pub \u003e\u003e .ssh/authorized_keys $ chmod 700 .ssh $ chmod 600 .ssh/authorized_keys ","date":"2020-04-19","objectID":"/posts/server/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95centos7/:2:0","tags":["server"],"title":"SSH免密登录CentOS7","uri":"/posts/server/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95centos7/"},{"categories":["server"],"content":"服务器额外配置（centos7.4以下） $ vim /etc/ssh/sshd_config 如下配置，7.4及更高版本不需要 RSAAuthentication yes PubkeyAuthentication yes AuthorizedKeysFile .ssh/authorized_keys ","date":"2020-04-19","objectID":"/posts/server/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95centos7/:3:0","tags":["server"],"title":"SSH免密登录CentOS7","uri":"/posts/server/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95centos7/"},{"categories":["server"],"content":"重启服务 $ service ssh restart ","date":"2020-04-19","objectID":"/posts/server/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95centos7/:4:0","tags":["server"],"title":"SSH免密登录CentOS7","uri":"/posts/server/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95centos7/"},{"categories":["server"],"content":"本机登录 ","date":"2020-04-19","objectID":"/posts/server/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95centos7/:5:0","tags":["server"],"title":"SSH免密登录CentOS7","uri":"/posts/server/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95centos7/"},{"categories":["server"],"content":"方式一：用户名@IP $ ssh user@ip ","date":"2020-04-19","objectID":"/posts/server/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95centos7/:5:1","tags":["server"],"title":"SSH免密登录CentOS7","uri":"/posts/server/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95centos7/"},{"categories":["server"],"content":"方式二：别名 配置.ssh/config Host xxx # 别名 Hostname xxx.xxx.xxx.xxx # ip Port 22 User xxx # 用户名 IdentityFile ~/.ssh/id_rsa $ ssh xxx ","date":"2020-04-19","objectID":"/posts/server/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95centos7/:5:2","tags":["server"],"title":"SSH免密登录CentOS7","uri":"/posts/server/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95centos7/"},{"categories":["server"],"content":"基础配置 ","date":"2020-04-19","objectID":"/posts/server/centos7%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/:1:0","tags":["server"],"title":"CentOS7开发环境","uri":"/posts/server/centos7%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["server"],"content":"修改主机名 # 查看一下当前主机名的情况 $ hostnamectl $ hostnamectl set-hostname gakki --static $ hostnamectl status ","date":"2020-04-19","objectID":"/posts/server/centos7%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/:1:1","tags":["server"],"title":"CentOS7开发环境","uri":"/posts/server/centos7%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["server"],"content":"基础工具 # 解决ifconfig 不存在 $ yum -y install net-tools # 文件传输 $ yum -y install lrzsz $ yum install -y unzip zip ","date":"2020-04-19","objectID":"/posts/server/centos7%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/:2:0","tags":["server"],"title":"CentOS7开发环境","uri":"/posts/server/centos7%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["server"],"content":"docker安装 ","date":"2020-04-19","objectID":"/posts/server/centos7%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/:3:0","tags":["server"],"title":"CentOS7开发环境","uri":"/posts/server/centos7%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["server"],"content":"安装docker 新建docker_install.sh 复制官方脚本https://get.docker.com/ 内容 安装与启动 ## 授权 $ chmod docker_install.sh ## 安装 $ ./chmod docker_install.sh ## 移除脚本 $ rm docker_install.sh ## 启动 $ systemctl start docker.service ## 开机自启动 $ systemctl enable docker.service 设置代理 $ vim /etc/docker/daemon.json { \"insecure-registries\" : [\"docker.server:80\"], \"debug\" : true, \"experimental\" : true, \"registry-mirrors\": [\"http://hub-mirror.c.163.com\"] } ","date":"2020-04-19","objectID":"/posts/server/centos7%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/:3:1","tags":["server"],"title":"CentOS7开发环境","uri":"/posts/server/centos7%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["server"],"content":"安装docker-compose 参照官网教程 $ sudo curl -L \"https://github.com/docker/compose/releases/download/1.25.5/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose $ sudo chmod +x /usr/local/bin/docker-compose ","date":"2020-04-19","objectID":"/posts/server/centos7%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/:3:2","tags":["server"],"title":"CentOS7开发环境","uri":"/posts/server/centos7%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["中间件"],"content":"安装 $ git clone git@github.com:alibaba/DataX.git $ cd DataX $ vim pom.xml 注释掉不需要的reader、writer\u003cmodule\u003e标签 mvn -U clean package assembly:assembly -Dmaven.test.skip=true ","date":"2020-03-19","objectID":"/posts/middleware/datax%E6%95%99%E7%A8%8B/:1:0","tags":["中间件"],"title":"DataX教程","uri":"/posts/middleware/datax%E6%95%99%E7%A8%8B/"},{"categories":["中间件"],"content":"使用","date":"2020-03-19","objectID":"/posts/middleware/datax%E6%95%99%E7%A8%8B/:2:0","tags":["中间件"],"title":"DataX教程","uri":"/posts/middleware/datax%E6%95%99%E7%A8%8B/"},{"categories":["中间件"],"content":"安装 假设你已经使用docker安装了es集群 $ cd ${docker-compose-file-dir} 安装ik插件 $ docker-compose exec es01 elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.6.0/elasticsearch-analysis-ik-7.6.0.zip 安装pinyin插件 $ docker-compose exec es01 elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-pinyin/releases/download/v7.6.0/elasticsearch-analysis-pinyin-7.6.0.zip 重启docker $ docker-compose restart ","date":"2020-03-05","objectID":"/posts/middleware/elasticsearch%E8%AE%BE%E7%BD%AEik+pinyin%E5%88%86%E8%AF%8D%E5%99%A8/:1:0","tags":["中间件"],"title":"ELasticSearch设置ik+pinyin分词器","uri":"/posts/middleware/elasticsearch%E8%AE%BE%E7%BD%AEik+pinyin%E5%88%86%E8%AF%8D%E5%99%A8/"},{"categories":["中间件"],"content":"使用 ","date":"2020-03-05","objectID":"/posts/middleware/elasticsearch%E8%AE%BE%E7%BD%AEik+pinyin%E5%88%86%E8%AF%8D%E5%99%A8/:2:0","tags":["中间件"],"title":"ELasticSearch设置ik+pinyin分词器","uri":"/posts/middleware/elasticsearch%E8%AE%BE%E7%BD%AEik+pinyin%E5%88%86%E8%AF%8D%E5%99%A8/"},{"categories":["中间件"],"content":"创建索引 PUT /my_index { \"settings\": { \"index\": { \"number_of_shards\": \"1\", \"analysis\": { \"analyzer\": { \"default\": { \"tokenizer\": \"ik_max_word\" }, \"pinyin_analyzer\": { \"type\": \"custom\", \"tokenizer\": \"my_pinyin\", \"filter\": [ \"word_delimiter\" ] } }, \"tokenizer\": { \"my_pinyin\": { \"type\": \"pinyin\", \"keep_first_letter\": true, \"keep_separate_first_letter\": false, \"keep_full_pinyin\": true, \"keep_original\": false, \"limit_first_letter_length\": 16, \"lowercase\": true } }, \"number_of_replicas\": \"1\" } } }, \"mappings\": { \"properties\": { \"id\": { \"type\": \"keyword\", \"fields\": { \"keyword\": { \"type\": \"keyword\", \"ignore_above\": 256 } } }, \"name\": { \"type\": \"text\", \"analyzer\": \"ik_max_word\", \"copy_to\": true, \"fields\": { \"pinyin\": { \"type\": \"text\", \"term_vector\": \"with_positions_offsets\", \"analyzer\": \"pinyin_analyzer\", \"boost\": 10 }, \"keyword\": { \"type\": \"keyword\", \"ignore_above\": 256 } } } } } } ","date":"2020-03-05","objectID":"/posts/middleware/elasticsearch%E8%AE%BE%E7%BD%AEik+pinyin%E5%88%86%E8%AF%8D%E5%99%A8/:2:1","tags":["中间件"],"title":"ELasticSearch设置ik+pinyin分词器","uri":"/posts/middleware/elasticsearch%E8%AE%BE%E7%BD%AEik+pinyin%E5%88%86%E8%AF%8D%E5%99%A8/"},{"categories":["中间件"],"content":"检查自定义的词语分析器是否生效 ## 请求 POST /my_index/_analyze { \"text\":\"sao的一逼\", \"analyzer\":\"pinyin_analyzer\" } ## 结果 { \"tokens\" : [ { \"token\" : \"sao\", \"start_offset\" : 0, \"end_offset\" : 0, \"type\" : \"word\", \"position\" : 0 }, { \"token\" : \"saodyb\", \"start_offset\" : 0, \"end_offset\" : 0, \"type\" : \"word\", \"position\" : 0 }, { \"token\" : \"de\", \"start_offset\" : 0, \"end_offset\" : 0, \"type\" : \"word\", \"position\" : 1 }, { \"token\" : \"yi\", \"start_offset\" : 0, \"end_offset\" : 0, \"type\" : \"word\", \"position\" : 2 }, { \"token\" : \"bi\", \"start_offset\" : 0, \"end_offset\" : 0, \"type\" : \"word\", \"position\" : 3 } ] } ","date":"2020-03-05","objectID":"/posts/middleware/elasticsearch%E8%AE%BE%E7%BD%AEik+pinyin%E5%88%86%E8%AF%8D%E5%99%A8/:2:2","tags":["中间件"],"title":"ELasticSearch设置ik+pinyin分词器","uri":"/posts/middleware/elasticsearch%E8%AE%BE%E7%BD%AEik+pinyin%E5%88%86%E8%AF%8D%E5%99%A8/"},{"categories":["中间件"],"content":"新增数据 可以使用datax批量导入数据，后面再开一坑 略 ","date":"2020-03-05","objectID":"/posts/middleware/elasticsearch%E8%AE%BE%E7%BD%AEik+pinyin%E5%88%86%E8%AF%8D%E5%99%A8/:2:3","tags":["中间件"],"title":"ELasticSearch设置ik+pinyin分词器","uri":"/posts/middleware/elasticsearch%E8%AE%BE%E7%BD%AEik+pinyin%E5%88%86%E8%AF%8D%E5%99%A8/"},{"categories":["中间件"],"content":"按「拼音」搜索 POST /my_index/_search { \"query\":{ \"match\":{ \"name.pinyin\":\"liudehua\" } } } ","date":"2020-03-05","objectID":"/posts/middleware/elasticsearch%E8%AE%BE%E7%BD%AEik+pinyin%E5%88%86%E8%AF%8D%E5%99%A8/:2:4","tags":["中间件"],"title":"ELasticSearch设置ik+pinyin分词器","uri":"/posts/middleware/elasticsearch%E8%AE%BE%E7%BD%AEik+pinyin%E5%88%86%E8%AF%8D%E5%99%A8/"},{"categories":["中间件"],"content":"按「中文名」搜索 POST /my_index/_search { \"query\":{ \"match\":{ \"name\":\"靖哥哥\" } } } ","date":"2020-03-05","objectID":"/posts/middleware/elasticsearch%E8%AE%BE%E7%BD%AEik+pinyin%E5%88%86%E8%AF%8D%E5%99%A8/:2:5","tags":["中间件"],"title":"ELasticSearch设置ik+pinyin分词器","uri":"/posts/middleware/elasticsearch%E8%AE%BE%E7%BD%AEik+pinyin%E5%88%86%E8%AF%8D%E5%99%A8/"},{"categories":["中间件"],"content":"按「中文名 + 拼音」搜索 POST /my_index/_search { \"query\": { \"multi_match\": { \"type\":\"most_fields\", \"query\":\"jing\", \"fields\":[\"name\", \"name.pinyin\"] } } } ","date":"2020-03-05","objectID":"/posts/middleware/elasticsearch%E8%AE%BE%E7%BD%AEik+pinyin%E5%88%86%E8%AF%8D%E5%99%A8/:2:6","tags":["中间件"],"title":"ELasticSearch设置ik+pinyin分词器","uri":"/posts/middleware/elasticsearch%E8%AE%BE%E7%BD%AEik+pinyin%E5%88%86%E8%AF%8D%E5%99%A8/"},{"categories":["中间件"],"content":"分析执行结果 GET my_index/_validate/query?explain { \"query\": { \"multi_match\": { \"type\":\"most_fields\", \"query\":\"靖g哥\", \"fields\":[\"name\", \"name.pinyin\"] } } } ## 结果 { \"_shards\" : { \"total\" : 1, \"successful\" : 1, \"failed\" : 0 }, \"valid\" : true, \"explanations\" : [ { \"index\" : \"my_index\", \"valid\" : true, \"explanation\" : \"((Synonym(name.pinyin:jgg name.pinyin:jing) (name.pinyin:g)^10.0 (name.pinyin:ge)^10.0) | (name:靖 name:g name:哥))~1.0\" } ] } ","date":"2020-03-05","objectID":"/posts/middleware/elasticsearch%E8%AE%BE%E7%BD%AEik+pinyin%E5%88%86%E8%AF%8D%E5%99%A8/:2:7","tags":["中间件"],"title":"ELasticSearch设置ik+pinyin分词器","uri":"/posts/middleware/elasticsearch%E8%AE%BE%E7%BD%AEik+pinyin%E5%88%86%E8%AF%8D%E5%99%A8/"},{"categories":["中间件"],"content":" 关闭索引 POST /index/_close 修改索引Settings PUT /index/_settings { \"settings\": { \"analysis\": { \"analyzer\": { \"ik_pinyin_analyzer\": { \"type\": \"custom\", \"tokenizer\": \"ik_smart\", \"filter\": [ \"my_pinyin\", \"word_delimiter\" ] } }, \"filter\": { \"my_pinyin\": { \"type\": \"pinyin\", \"keep_first_letter\": false, \"keep_full_pinyin\": true, \"keep_none_chinese\": true, \"keep_none_chinese_in_first_letter\": true, \"keep_original\": false, \"limit_first_letter_length\": 16, \"lowercase\": true, \"trim_whitespace\": true } } } } } 打开索引 POST /index/_open ","date":"2020-03-05","objectID":"/posts/middleware/elasticsearch%E4%BF%AE%E6%94%B9%E5%B7%B2%E7%BB%8F%E5%AD%98%E5%9C%A8%E7%9A%84index%E7%9A%84settings/:0:0","tags":["中间件"],"title":"ElasticSearch修改已经存在的index的settings","uri":"/posts/middleware/elasticsearch%E4%BF%AE%E6%94%B9%E5%B7%B2%E7%BB%8F%E5%AD%98%E5%9C%A8%E7%9A%84index%E7%9A%84settings/"},{"categories":["macOS"],"content":"Alfred -\u003e feature -\u003e Web Search -\u003e Add Custom Search Search Url：输入网址 Keyword： 检索关键字 ","date":"2020-03-04","objectID":"/posts/mac/alfred%E8%AE%BE%E7%BD%AEwebsearch%E5%BF%AB%E9%80%9F%E6%89%93%E5%BC%80%E7%BD%91%E9%A1%B5/:0:0","tags":["macOS"],"title":"Alfred设置WebSearch快速打开网页","uri":"/posts/mac/alfred%E8%AE%BE%E7%BD%AEwebsearch%E5%BF%AB%E9%80%9F%E6%89%93%E5%BC%80%E7%BD%91%E9%A1%B5/"},{"categories":["java"],"content":"问题描述 ","date":"2020-03-04","objectID":"/posts/java/swagger%E5%87%BA%E7%8E%B0could_not_resolve_pointer/:1:0","tags":["java"],"title":"Swagger出现Could not resolve pointer","uri":"/posts/java/swagger%E5%87%BA%E7%8E%B0could_not_resolve_pointer/"},{"categories":["java"],"content":"原因 类上的注解 “/” 的问题 @ApiModel(不能使用“/”) ","date":"2020-03-04","objectID":"/posts/java/swagger%E5%87%BA%E7%8E%B0could_not_resolve_pointer/:2:0","tags":["java"],"title":"Swagger出现Could not resolve pointer","uri":"/posts/java/swagger%E5%87%BA%E7%8E%B0could_not_resolve_pointer/"},{"categories":["macOS"],"content":"问题 安装 homebrew 报错 curl: (7) Failed to connect to raw.githubusercontent.com port 443: Operation ","date":"2020-02-29","objectID":"/posts/mac/homebrew%E5%AE%89%E8%A3%85443%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/:1:0","tags":["macOS"],"title":"Homebrew安装443错误解决方案","uri":"/posts/mac/homebrew%E5%AE%89%E8%A3%85443%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"},{"categories":["macOS"],"content":"方案 重启终端； 重启wifi ","date":"2020-02-29","objectID":"/posts/mac/homebrew%E5%AE%89%E8%A3%85443%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/:2:0","tags":["macOS"],"title":"Homebrew安装443错误解决方案","uri":"/posts/mac/homebrew%E5%AE%89%E8%A3%85443%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"},{"categories":["做饭"],"content":"用途 做各种酸辣口的面，粉丝，河粉 ","date":"2020-02-28","objectID":"/posts/cook/%E9%85%B8%E8%BE%A3%E9%85%B1%E6%B1%81/:1:0","tags":["做饭"],"title":"酸辣酱汁","uri":"/posts/cook/%E9%85%B8%E8%BE%A3%E9%85%B1%E6%B1%81/"},{"categories":["做饭"],"content":"比例 1勺生抽 1勺陈醋 1勺白糖 1勺老干妈(喜欢辣点可以多加) 1/3勺盐 1勺番茄酱（推荐亨氏，酸甜口感更浓厚，喜欢可以加到2勺） ","date":"2020-02-28","objectID":"/posts/cook/%E9%85%B8%E8%BE%A3%E9%85%B1%E6%B1%81/:2:0","tags":["做饭"],"title":"酸辣酱汁","uri":"/posts/cook/%E9%85%B8%E8%BE%A3%E9%85%B1%E6%B1%81/"},{"categories":["java"],"content":"查看 select auto_increment from information_schema.tables where table_schema='xxx_db' and table_name='xxx'; ","date":"2020-02-26","objectID":"/posts/java/mysql%E4%BF%AE%E6%94%B9auto_increment/:1:0","tags":["java"],"title":"Mysql修改Auto_increment","uri":"/posts/java/mysql%E4%BF%AE%E6%94%B9auto_increment/"},{"categories":["java"],"content":"修改 alter table xxx_db.xxx auto_increment=1000; 坑：假设表中有ID大于你设置的值如1000，修改将不会生效 ","date":"2020-02-26","objectID":"/posts/java/mysql%E4%BF%AE%E6%94%B9auto_increment/:2:0","tags":["java"],"title":"Mysql修改Auto_increment","uri":"/posts/java/mysql%E4%BF%AE%E6%94%B9auto_increment/"},{"categories":["git"],"content":"fork项目 直接进入 GitHub 页面，点击Fork按钮。 就是这么简单。 克隆到本地，才能开始骚操作～～ # Clone your fork to your local machine $ git clone git@github.com:USERNAME/FORKED-PROJECT.git ","date":"2020-02-23","objectID":"/posts/git/git%E6%A0%87%E5%87%86forkpullrequest%E6%B5%81%E7%A8%8B/:1:0","tags":["git"],"title":"Git标准Fork \u0026 Pull Request流程","uri":"/posts/git/git%E6%A0%87%E5%87%86forkpullrequest%E6%B5%81%E7%A8%8B/"},{"categories":["git"],"content":"让你的fork保持最新 # Add 'upstream' repo to list of remotes $ git remote add upstream https://github.com/UPSTREAM-USER/ORIGINAL-PROJECT.git # Verify the new remote named 'upstream' $ git remote -v 获取上游 repo 的分支和最新的提交来将它们放入你的存储库 # Fetch from upstream remote $ git fetch upstream # View all branches, including those from upstream $ git branch -va 检查你自己的 master 分支、合并上游的 master 分支 # Checkout your master branch and merge upstream git checkout master git merge upstream/master 现在，您的本地主分支是最新的一切修改上游。 如果在本地 master 分支上没有唯一的提交，git 将简单地执行快进操作。 然而，如果您一直在 master 上进行更改(在绝大多数情况下，您可能不应该这样做——请参阅下一部分，您可能必须处理冲突。 在这样做的时候，要注意尊重上游所做的更改。 ","date":"2020-02-23","objectID":"/posts/git/git%E6%A0%87%E5%87%86forkpullrequest%E6%B5%81%E7%A8%8B/:2:0","tags":["git"],"title":"Git标准Fork \u0026 Pull Request流程","uri":"/posts/git/git%E6%A0%87%E5%87%86forkpullrequest%E6%B5%81%E7%A8%8B/"},{"categories":["git"],"content":"开发 无论何时开始处理一个新特性或修复错误，创建一个新分支都是很重要的。 它不仅是正确的 git 工作流，而且还可以使您的更改与主分支保持组织和分离，这样您就可以轻松地为您完成的每个任务提交和管理多个拉请求。 # Checkout the master branch - you want your new branch to come from master $ git checkout master # Create a new branch named newfeature (give your branch its own simple informative name),Switch to your new branch $ git branch -b newfeature 开始折腾吧 ","date":"2020-02-23","objectID":"/posts/git/git%E6%A0%87%E5%87%86forkpullrequest%E6%B5%81%E7%A8%8B/:3:0","tags":["git"],"title":"Git标准Fork \u0026 Pull Request流程","uri":"/posts/git/git%E6%A0%87%E5%87%86forkpullrequest%E6%B5%81%E7%A8%8B/"},{"categories":["git"],"content":"提交一个Pull Request ","date":"2020-02-23","objectID":"/posts/git/git%E6%A0%87%E5%87%86forkpullrequest%E6%B5%81%E7%A8%8B/:4:0","tags":["git"],"title":"Git标准Fork \u0026 Pull Request流程","uri":"/posts/git/git%E6%A0%87%E5%87%86forkpullrequest%E6%B5%81%E7%A8%8B/"},{"categories":["git"],"content":"清理你的工作 在提交您的拉请求之前，您可能需要做一些事情来清理您的分支，并使其尽可能简单，以便原来的 repo 的维护人员测试、接受和合并您的工作。 如果已经向上游主分支提交了任何提交，那么您应该重新设置开发分支的基础，以便合并它将是一个简单的快进操作，不需要任何冲突解决工作。 # Fetch upstream master and merge with your repo's master branch $ git fetch upstream $ git checkout master $ git merge upstream/master # If there were any new commits, rebase your development branch $ git checkout newfeature $ git rebase master 现在，可能需要将一些较小的提交压缩成较大的、更具凝聚力的提交。 你可以通过一个交互式 rebase 来实现: # Rebase all commits on your development branch $ git checkout $ git rebase -i master 这将打开一个文本编辑器，您可以在其中指定哪些提交要压制。 ","date":"2020-02-23","objectID":"/posts/git/git%E6%A0%87%E5%87%86forkpullrequest%E6%B5%81%E7%A8%8B/:4:1","tags":["git"],"title":"Git标准Fork \u0026 Pull Request流程","uri":"/posts/git/git%E6%A0%87%E5%87%86forkpullrequest%E6%B5%81%E7%A8%8B/"},{"categories":["git"],"content":"提交 一旦你把所有的修改都提交到 GitHub，在 GitHub 上进入你的 fork 页面，选择你的开发分支，然后点击 pull request 按钮。 如果你需要对你的 pull 请求做任何调整，只需将更新推送到 GitHub 即可。 您的拉请求将自动跟踪开发分支上的更改并进行更新。 ","date":"2020-02-23","objectID":"/posts/git/git%E6%A0%87%E5%87%86forkpullrequest%E6%B5%81%E7%A8%8B/:4:2","tags":["git"],"title":"Git标准Fork \u0026 Pull Request流程","uri":"/posts/git/git%E6%A0%87%E5%87%86forkpullrequest%E6%B5%81%E7%A8%8B/"},{"categories":["git"],"content":"接受和合并拉请求 请注意，前面的部分是从创建 fork 并生成 pull 请求的人的角度编写的，而本节是从处理传入 pull 请求的原始存储库所有者的角度编写的。 因此，当“ forker”将原始存储库称为上游存储库时，我们现在将其视为原始存储库的所有者和标准的远程起源。 ","date":"2020-02-23","objectID":"/posts/git/git%E6%A0%87%E5%87%86forkpullrequest%E6%B5%81%E7%A8%8B/:5:0","tags":["git"],"title":"Git标准Fork \u0026 Pull Request流程","uri":"/posts/git/git%E6%A0%87%E5%87%86forkpullrequest%E6%B5%81%E7%A8%8B/"},{"categories":["git"],"content":"检查和测试拉请求 打开。 .git/config 文件，并在[ remote \"origin\"]下添加一个新行: fetch = +refs/pull/*/head:refs/pull/origin/* 现在，您可以获取和检出任何拉请求，以便您可以测试它们: # Fetch all pull request branches $ git fetch origin # Checkout out a given pull request branch based on its number $ git checkout -b 999 pull/origin/999 请记住，这些分支是只读的，您不能推送任何更改。 ","date":"2020-02-23","objectID":"/posts/git/git%E6%A0%87%E5%87%86forkpullrequest%E6%B5%81%E7%A8%8B/:5:1","tags":["git"],"title":"Git标准Fork \u0026 Pull Request流程","uri":"/posts/git/git%E6%A0%87%E5%87%86forkpullrequest%E6%B5%81%E7%A8%8B/"},{"categories":["git"],"content":"自动合并拉请求 如果合并是一个简单的fast-forward，你可以通过点击 GitHub 上的 pull request 页面上的按钮来自动完成合并。 ","date":"2020-02-23","objectID":"/posts/git/git%E6%A0%87%E5%87%86forkpullrequest%E6%B5%81%E7%A8%8B/:5:2","tags":["git"],"title":"Git标准Fork \u0026 Pull Request流程","uri":"/posts/git/git%E6%A0%87%E5%87%86forkpullrequest%E6%B5%81%E7%A8%8B/"},{"categories":["git"],"content":"手动合并拉请求 要手动执行合并，您需要在源代码报告中签出目标分支，直接从分支中拉出，然后合并并推出。 # Checkout the branch you're merging to in the target repo $ git checkout master # Pull the development branch from the fork repo where the pull request development was done. $ git pull https://github.com/forkuser/forkedrepo.git newfeature # Merge the development branch $ git merge newfeature # Push master with the new feature merged into it $ git push origin master 现在您已经完成了开发分支，可以自由地删除它了。 $ git branch -d newfeature ","date":"2020-02-23","objectID":"/posts/git/git%E6%A0%87%E5%87%86forkpullrequest%E6%B5%81%E7%A8%8B/:5:3","tags":["git"],"title":"Git标准Fork \u0026 Pull Request流程","uri":"/posts/git/git%E6%A0%87%E5%87%86forkpullrequest%E6%B5%81%E7%A8%8B/"},{"categories":["git"],"content":"巨人的肩膀 https://gist.github.com/Chaser324/ce0505fbed06b947d962 ","date":"2020-02-23","objectID":"/posts/git/git%E6%A0%87%E5%87%86forkpullrequest%E6%B5%81%E7%A8%8B/:6:0","tags":["git"],"title":"Git标准Fork \u0026 Pull Request流程","uri":"/posts/git/git%E6%A0%87%E5%87%86forkpullrequest%E6%B5%81%E7%A8%8B/"},{"categories":["git"],"content":"git add 显示中文乱码 使用 git add 添加要提交的文件的时候，如果文件名是中文，会显示形如\\347\\204\\246\\347\\263\\226\\345\\245\\266\\350\\214\\266.md的乱码 $ git config --global core.quotepath false ","date":"2020-02-23","objectID":"/posts/git/git%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/:1:0","tags":["git"],"title":"Git中文乱码解决","uri":"/posts/git/git%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/"},{"categories":["git"],"content":"git log 显示提交的中文 log 乱码 # 设置 git gui 的界面编码 $ git config --global gui.encoding utf-8 # 设置 commit log 提交时使用 utf-8 编码，可避免服务器上乱码，同时与 linux 上的提交保持一致！ $ git config --global i18n.commitencoding utf-8 # 使得在 $ git log 时将 utf-8 编码转换成 gbk 编码，解决 Msys bash 中 git log 乱码。 git config --global i18n.logoutputencoding gbk # 使得 git log 可以正常显示中文（配合 i18n.logoutputencoding = gbk)，在 /etc/profile 中添加： export LESSCHARSET=utf-8 ","date":"2020-02-23","objectID":"/posts/git/git%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/:2:0","tags":["git"],"title":"Git中文乱码解决","uri":"/posts/git/git%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/"},{"categories":["git"],"content":"自带的 bash 中，使用 ls 命令查看中文文件名乱码 使用 ls --show-control-chars 命令来强制使用控制台字符编码显示文件名，即可查看中文文件名。 为了方便使用，可以编辑 /etc/git-completion.bash ，新增一行 alias ls=\"ls –show-control-chars\" ","date":"2020-02-23","objectID":"/posts/git/git%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/:3:0","tags":["git"],"title":"Git中文乱码解决","uri":"/posts/git/git%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/"},{"categories":["做饭"],"content":"工具 锅 ","date":"2020-02-23","objectID":"/posts/cook/%E8%8C%84%E6%B1%81%E8%99%BE%E4%BB%81/:1:0","tags":["做饭"],"title":"茄汁虾仁","uri":"/posts/cook/%E8%8C%84%E6%B1%81%E8%99%BE%E4%BB%81/"},{"categories":["做饭"],"content":"食材 虾仁 15个 蒜 2瓣 油 适量 盐 1/2茶匙 料酒 1汤匙 番茄酱 2汤匙 清水 5汤匙 ","date":"2020-02-23","objectID":"/posts/cook/%E8%8C%84%E6%B1%81%E8%99%BE%E4%BB%81/:2:0","tags":["做饭"],"title":"茄汁虾仁","uri":"/posts/cook/%E8%8C%84%E6%B1%81%E8%99%BE%E4%BB%81/"},{"categories":["做饭"],"content":"步骤 ","date":"2020-02-23","objectID":"/posts/cook/%E8%8C%84%E6%B1%81%E8%99%BE%E4%BB%81/:3:0","tags":["做饭"],"title":"茄汁虾仁","uri":"/posts/cook/%E8%8C%84%E6%B1%81%E8%99%BE%E4%BB%81/"},{"categories":["做饭"],"content":"准备 虾仁加入1汤匙料酒、1/4茶匙盐，腌制10分钟 蒜切成蒜末备用 番茄汁加入下面材料后，搅拌均匀： 2汤匙番茄酱 1/4茶匙盐 5汤匙清水 ","date":"2020-02-23","objectID":"/posts/cook/%E8%8C%84%E6%B1%81%E8%99%BE%E4%BB%81/:3:1","tags":["做饭"],"title":"茄汁虾仁","uri":"/posts/cook/%E8%8C%84%E6%B1%81%E8%99%BE%E4%BB%81/"},{"categories":["做饭"],"content":"制作 起锅，加入适量的油后，加入蒜末爆香 倒入番茄汁，大火烧开 放入虾仁，翻炒均匀 盖上锅盖煮3分钟 大火翻炒收汁 出锅装盘 ","date":"2020-02-23","objectID":"/posts/cook/%E8%8C%84%E6%B1%81%E8%99%BE%E4%BB%81/:3:2","tags":["做饭"],"title":"茄汁虾仁","uri":"/posts/cook/%E8%8C%84%E6%B1%81%E8%99%BE%E4%BB%81/"},{"categories":["做饭"],"content":"成果 ","date":"2020-02-23","objectID":"/posts/cook/%E8%8C%84%E6%B1%81%E8%99%BE%E4%BB%81/:4:0","tags":["做饭"],"title":"茄汁虾仁","uri":"/posts/cook/%E8%8C%84%E6%B1%81%E8%99%BE%E4%BB%81/"},{"categories":["做饭"],"content":"工具 烤箱 锡纸 ","date":"2020-02-23","objectID":"/posts/cook/%E8%92%9C%E9%A6%99%E8%9C%82%E8%9C%9C%E7%83%A4%E9%B8%A1%E7%BF%85/:1:0","tags":["做饭"],"title":"蒜香蜂蜜烤鸡翅","uri":"/posts/cook/%E8%92%9C%E9%A6%99%E8%9C%82%E8%9C%9C%E7%83%A4%E9%B8%A1%E7%BF%85/"},{"categories":["做饭"],"content":"食材 鸡翅 5个 盐 小半勺 料酒 1勺 生抽 1勺 老抽 1勺 蚝油 1勺 蜂蜜 2勺 黑胡椒 适量 蒜末 适量 油 适量 ","date":"2020-02-23","objectID":"/posts/cook/%E8%92%9C%E9%A6%99%E8%9C%82%E8%9C%9C%E7%83%A4%E9%B8%A1%E7%BF%85/:2:0","tags":["做饭"],"title":"蒜香蜂蜜烤鸡翅","uri":"/posts/cook/%E8%92%9C%E9%A6%99%E8%9C%82%E8%9C%9C%E7%83%A4%E9%B8%A1%E7%BF%85/"},{"categories":["做饭"],"content":"步骤 ","date":"2020-02-23","objectID":"/posts/cook/%E8%92%9C%E9%A6%99%E8%9C%82%E8%9C%9C%E7%83%A4%E9%B8%A1%E7%BF%85/:3:0","tags":["做饭"],"title":"蒜香蜂蜜烤鸡翅","uri":"/posts/cook/%E8%92%9C%E9%A6%99%E8%9C%82%E8%9C%9C%E7%83%A4%E9%B8%A1%E7%BF%85/"},{"categories":["做饭"],"content":"准备 鸡翅洗干净，双面划出刀口，方便入味； 加入料酒、生抽、老抽、蚝油、蜂蜜、蚝油、黑胡椒、盐、蒜末，盖上保鲜膜，冰箱冷藏腌制2小时 ","date":"2020-02-23","objectID":"/posts/cook/%E8%92%9C%E9%A6%99%E8%9C%82%E8%9C%9C%E7%83%A4%E9%B8%A1%E7%BF%85/:3:1","tags":["做饭"],"title":"蒜香蜂蜜烤鸡翅","uri":"/posts/cook/%E8%92%9C%E9%A6%99%E8%9C%82%E8%9C%9C%E7%83%A4%E9%B8%A1%E7%BF%85/"},{"categories":["做饭"],"content":"制作 烤盘铺上锡纸，刷上一层油，排上鸡翅，将剩余的酱汁均匀倒在鸡翅上 烤箱200度预热5分钟，放入鸡翅，200度烤制15分钟 鸡翅翻面，200度再烤制10分钟 取出装盘 ","date":"2020-02-23","objectID":"/posts/cook/%E8%92%9C%E9%A6%99%E8%9C%82%E8%9C%9C%E7%83%A4%E9%B8%A1%E7%BF%85/:3:2","tags":["做饭"],"title":"蒜香蜂蜜烤鸡翅","uri":"/posts/cook/%E8%92%9C%E9%A6%99%E8%9C%82%E8%9C%9C%E7%83%A4%E9%B8%A1%E7%BF%85/"},{"categories":["做饭"],"content":"成果 ","date":"2020-02-23","objectID":"/posts/cook/%E8%92%9C%E9%A6%99%E8%9C%82%E8%9C%9C%E7%83%A4%E9%B8%A1%E7%BF%85/:4:0","tags":["做饭"],"title":"蒜香蜂蜜烤鸡翅","uri":"/posts/cook/%E8%92%9C%E9%A6%99%E8%9C%82%E8%9C%9C%E7%83%A4%E9%B8%A1%E7%BF%85/"},{"categories":["做饭"],"content":"工具 锅 面粉筛（其他过滤也行） ","date":"2020-02-23","objectID":"/posts/cook/%E7%84%A6%E7%B3%96%E5%A5%B6%E8%8C%B6/:1:0","tags":["做饭"],"title":"焦糖奶茶","uri":"/posts/cook/%E7%84%A6%E7%B3%96%E5%A5%B6%E8%8C%B6/"},{"categories":["做饭"],"content":"食材 白糖 1/4碗 清水 1/4碗 开水 1/2 碗 茶叶适量（我用的大红袍） 纯牛奶一盒 ","date":"2020-02-23","objectID":"/posts/cook/%E7%84%A6%E7%B3%96%E5%A5%B6%E8%8C%B6/:2:0","tags":["做饭"],"title":"焦糖奶茶","uri":"/posts/cook/%E7%84%A6%E7%B3%96%E5%A5%B6%E8%8C%B6/"},{"categories":["做饭"],"content":"步骤 ","date":"2020-02-23","objectID":"/posts/cook/%E7%84%A6%E7%B3%96%E5%A5%B6%E8%8C%B6/:3:0","tags":["做饭"],"title":"焦糖奶茶","uri":"/posts/cook/%E7%84%A6%E7%B3%96%E5%A5%B6%E8%8C%B6/"},{"categories":["做饭"],"content":"制作 锅中倒入白糖，清水，小火煮，待糖融化后，不停搅拌，得到焦糖 变色 冒大泡 大泡变小泡 倒入开水，加入茶叶，小火煮制，不停搅拌，直到闻到茶香 加入牛奶，不停搅拌，直到冒出小泡 经过过滤倒入杯中 ","date":"2020-02-23","objectID":"/posts/cook/%E7%84%A6%E7%B3%96%E5%A5%B6%E8%8C%B6/:3:1","tags":["做饭"],"title":"焦糖奶茶","uri":"/posts/cook/%E7%84%A6%E7%B3%96%E5%A5%B6%E8%8C%B6/"},{"categories":["做饭"],"content":"成果 ","date":"2020-02-23","objectID":"/posts/cook/%E7%84%A6%E7%B3%96%E5%A5%B6%E8%8C%B6/:4:0","tags":["做饭"],"title":"焦糖奶茶","uri":"/posts/cook/%E7%84%A6%E7%B3%96%E5%A5%B6%E8%8C%B6/"},{"categories":["做饭"],"content":"工具 烤箱 锡纸 ","date":"2020-02-23","objectID":"/posts/cook/%E7%83%A4%E7%AE%B1%E7%89%88%E9%B8%A1%E7%B1%B3%E8%8A%B1/:1:0","tags":["做饭"],"title":"烤箱版鸡米花","uri":"/posts/cook/%E7%83%A4%E7%AE%B1%E7%89%88%E9%B8%A1%E7%B1%B3%E8%8A%B1/"},{"categories":["做饭"],"content":"食材 鸡腿肉，可以用鸡胸肉代替 盐 半勺 酱油 1勺 料酒 1勺 蚝油 1勺 鸡蛋 1个 淀粉 适量 清水 适量 面包糠，可以用薯片代替 蕃茄酱 ","date":"2020-02-23","objectID":"/posts/cook/%E7%83%A4%E7%AE%B1%E7%89%88%E9%B8%A1%E7%B1%B3%E8%8A%B1/:2:0","tags":["做饭"],"title":"烤箱版鸡米花","uri":"/posts/cook/%E7%83%A4%E7%AE%B1%E7%89%88%E9%B8%A1%E7%B1%B3%E8%8A%B1/"},{"categories":["做饭"],"content":"步骤 ","date":"2020-02-23","objectID":"/posts/cook/%E7%83%A4%E7%AE%B1%E7%89%88%E9%B8%A1%E7%B1%B3%E8%8A%B1/:3:0","tags":["做饭"],"title":"烤箱版鸡米花","uri":"/posts/cook/%E7%83%A4%E7%AE%B1%E7%89%88%E9%B8%A1%E7%B1%B3%E8%8A%B1/"},{"categories":["做饭"],"content":"准备 鸡腿肉（或鸡胸肉）切大小合适的块，加入盐、酱油、蚝油、料酒，盖上保鲜膜，放冰箱冷藏半小时以上 碗中打入鸡蛋，打散 薯片打开，按住袋口，碾成碎片 烤盘裹上锡纸 ","date":"2020-02-23","objectID":"/posts/cook/%E7%83%A4%E7%AE%B1%E7%89%88%E9%B8%A1%E7%B1%B3%E8%8A%B1/:3:1","tags":["做饭"],"title":"烤箱版鸡米花","uri":"/posts/cook/%E7%83%A4%E7%AE%B1%E7%89%88%E9%B8%A1%E7%B1%B3%E8%8A%B1/"},{"categories":["做饭"],"content":"制作 冰箱取出腌制好的肉块 裹上淀粉； 放清水1～3秒捞出； 再次裹上淀粉； 裹上鸡蛋液； 裹上面包糠或者薯片碎； 放置在锡纸上 烤箱180度预热5分钟，将烤盘放入，180度烤制20分钟； 取出装盘，挤上蕃茄酱 煮上一杯奶茶，可跳过 ","date":"2020-02-23","objectID":"/posts/cook/%E7%83%A4%E7%AE%B1%E7%89%88%E9%B8%A1%E7%B1%B3%E8%8A%B1/:3:2","tags":["做饭"],"title":"烤箱版鸡米花","uri":"/posts/cook/%E7%83%A4%E7%AE%B1%E7%89%88%E9%B8%A1%E7%B1%B3%E8%8A%B1/"},{"categories":["做饭"],"content":"成果 ","date":"2020-02-23","objectID":"/posts/cook/%E7%83%A4%E7%AE%B1%E7%89%88%E9%B8%A1%E7%B1%B3%E8%8A%B1/:4:0","tags":["做饭"],"title":"烤箱版鸡米花","uri":"/posts/cook/%E7%83%A4%E7%AE%B1%E7%89%88%E9%B8%A1%E7%B1%B3%E8%8A%B1/"},{"categories":["read"],"content":" 人要永远做小孩子虽办不到，但想要保持沉默是能办到的。 其实萧斯塔科维奇长得什么样，我也不知道。我只是想象他是这个样子，然后就哈哈大笑。我的朋友看了这一段就不笑，他以为这样吐痰动作不美，境界不高，思想也不好。这使我不敢与他争辩——再争辩就要涉入某些话语的范畴，而这些话语，就是阴阳两界的分界线。 要给人讲“五讲四美”，最好是戴上个红箍。根据我对事实的了解，红箍还不大够用，最好穿上一身警服。“五讲四美”虽然是些好话，讲的时候最好有实力或者说是身份作为保证。 从那些话里我还知道了一亩地可以产三十万斤粮，然后我们就饿得要死。总而言之，从小我对讲出来的话就不大相信，越是声色俱厉，嗓门高亢，我越是不信，这种怀疑态度起源于我饥饿的肚肠。和任何话语相比，饥饿都是更大的真理。 饥饿可以把小孩子变成白蚁。 我们这一代，生于一个神圣的时代，多么幸福；而且肩负着解放天下三分之二受苦人的神圣使命，等等。同年龄的人听了都很振奋，很爱听，但我总有点疑问，这么多美事怎么都叫我赶上了。 假如我们真遇上了这么多美事，不把它说出来会不会更好。 与其大呼小叫说要去解放他们，让人家苦等，倒不如一声不吭，忽然有一天把他们解放，给他们一个意外惊喜。 话语教给我们很多，但善恶还是可以自明。话语想要教给我们，人与人生来就不平等。在人间，尊卑有序是永恒的真理，但你也可以不听。 我把一个咬人的大学生称为人性的教师，肯定要把一些人气得发狂。但我有自己的道理：一个脾气暴躁、动辄使用牙齿的人，尚且不肯吞下别人的肉体，这一课看起来更有力量。 ","date":"2020-02-23","objectID":"/posts/read/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%B2%89%E9%BB%98%E7%9A%84%E5%A4%A7%E5%A4%9A%E6%95%B0/:0:0","tags":["read"],"title":"读书笔记 《沉默的大多数》","uri":"/posts/read/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%B2%89%E9%BB%98%E7%9A%84%E5%A4%A7%E5%A4%9A%E6%95%B0/"},{"categories":["macOS"],"content":"更新Homebrew $ brew update ","date":"2020-02-23","objectID":"/posts/mac/homebrew%E5%AE%9E%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/:1:0","tags":["macOS"],"title":"Homebrew实用命令总结","uri":"/posts/mac/homebrew%E5%AE%9E%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"},{"categories":["macOS"],"content":"查看哪些包可以更新 $ brew outdated ","date":"2020-02-23","objectID":"/posts/mac/homebrew%E5%AE%9E%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/:2:0","tags":["macOS"],"title":"Homebrew实用命令总结","uri":"/posts/mac/homebrew%E5%AE%9E%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"},{"categories":["macOS"],"content":"更新包 (formula) Homebrew 会安装新版本的包，但旧版本仍然会保留。 $ brew upgrade # 更新所有的包 $ brew upgrade $FORMULA # 更新指定的包 ","date":"2020-02-23","objectID":"/posts/mac/homebrew%E5%AE%9E%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/:3:0","tags":["macOS"],"title":"Homebrew实用命令总结","uri":"/posts/mac/homebrew%E5%AE%9E%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"},{"categories":["macOS"],"content":"清理旧版本 Homebrew 只会清除比当前安装的包更老的版本，所以不用担心有些包没更新但被删了。 $ brew cleanup # 清理所有包的旧版本 $ brew cleanup $FORMULA # 清理指定包的旧版本 $ brew cleanup -n # 查看可清理的旧版本包，不执行实际操作 ","date":"2020-02-23","objectID":"/posts/mac/homebrew%E5%AE%9E%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/:4:0","tags":["macOS"],"title":"Homebrew实用命令总结","uri":"/posts/mac/homebrew%E5%AE%9E%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"},{"categories":["macOS"],"content":"锁定不想更新的包 但我们有时候会担心自动升级把一些不希望更新的包更新了。数据库就属于这一类，尤其是 PostgreSQL 跨 minor 版本升级都要迁移数据库的。我们更希望找个时间单独处理它。这时可用 brew pin 去锁定这个包，然后 brew update 就会略过它了。 $ brew pin $FORMULA # 锁定某个包 $ brew unpin $FORMULA # 取消锁定 ","date":"2020-02-23","objectID":"/posts/mac/homebrew%E5%AE%9E%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/:5:0","tags":["macOS"],"title":"Homebrew实用命令总结","uri":"/posts/mac/homebrew%E5%AE%9E%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"},{"categories":["macOS"],"content":"查看包的相关信息 $ brew info $FORMULA # 显示某个包的信息 $ brew info # 显示安装了包数量，文件数量，和总占用空间 ","date":"2020-02-23","objectID":"/posts/mac/homebrew%E5%AE%9E%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/:6:0","tags":["macOS"],"title":"Homebrew实用命令总结","uri":"/posts/mac/homebrew%E5%AE%9E%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"},{"categories":["macOS"],"content":"显示包的依赖关系 $ brew deps --installed --tree # 查看已安装的包的依赖，树形显示 ","date":"2020-02-23","objectID":"/posts/mac/homebrew%E5%AE%9E%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/:7:0","tags":["macOS"],"title":"Homebrew实用命令总结","uri":"/posts/mac/homebrew%E5%AE%9E%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"},{"categories":["java"],"content":"导入jar包 'org.springframework.boot:spring-boot-devtools' ","date":"2020-02-23","objectID":"/posts/java/springboot%E8%AE%BE%E7%BD%AE%E9%A1%B9%E7%9B%AE%E7%83%AD%E5%90%AF%E5%8A%A8/:1:0","tags":["java"],"title":"SpringBoot设置项目热启动","uri":"/posts/java/springboot%E8%AE%BE%E7%BD%AE%E9%A1%B9%E7%9B%AE%E7%83%AD%E5%90%AF%E5%8A%A8/"},{"categories":["java"],"content":"添加配置项 devtools: #热部署 restart: enabled: true ","date":"2020-02-23","objectID":"/posts/java/springboot%E8%AE%BE%E7%BD%AE%E9%A1%B9%E7%9B%AE%E7%83%AD%E5%90%AF%E5%8A%A8/:2:0","tags":["java"],"title":"SpringBoot设置项目热启动","uri":"/posts/java/springboot%E8%AE%BE%E7%BD%AE%E9%A1%B9%E7%9B%AE%E7%83%AD%E5%90%AF%E5%8A%A8/"},{"categories":["java"],"content":"在idea开启 如下图设置 Build，Execution...-\u003eCompiler，勾选 Build project automatically 快捷键 commond+option+shift+'/'，弹出Maintenance界面 点击Registry, 勾选compiler.automake.allow.when.app.running 重启项目 ","date":"2020-02-23","objectID":"/posts/java/springboot%E8%AE%BE%E7%BD%AE%E9%A1%B9%E7%9B%AE%E7%83%AD%E5%90%AF%E5%8A%A8/:3:0","tags":["java"],"title":"SpringBoot设置项目热启动","uri":"/posts/java/springboot%E8%AE%BE%E7%BD%AE%E9%A1%B9%E7%9B%AE%E7%83%AD%E5%90%AF%E5%8A%A8/"},{"categories":["java"],"content":"方案 H5中的新特性：Cross-Origin Resource Sharing（跨域资源共享）。通过它，我们的开发者（主要指后端开发者）可以决定资源是否能被跨域访问。 cors是一个w3c标准，它允许浏览器（目前ie8以下还不能被支持）像我们不同源的服务器发出xmlHttpRequest请求，我们可以继续使用ajax进行请求访问。 ","date":"2020-02-22","objectID":"/posts/java/java%E9%85%8D%E7%BD%AE%E5%85%81%E8%AE%B8%E8%B7%A8%E5%9F%9F%E8%AE%BF%E9%97%AE/:1:0","tags":["java"],"title":"Java配置允许跨域访问","uri":"/posts/java/java%E9%85%8D%E7%BD%AE%E5%85%81%E8%AE%B8%E8%B7%A8%E5%9F%9F%E8%AE%BF%E9%97%AE/"},{"categories":["java"],"content":"配置文件 com.noone.springbootframeworkdaily.common.config.CorsConfig package com.noone.springbootframeworkdaily.common.config; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.web.cors.CorsConfiguration; import org.springframework.web.cors.UrlBasedCorsConfigurationSource; import org.springframework.web.filter.CorsFilter; /** * 跨域请求设置 * @author noone */ @Configuration public class CorsConfig { private CorsConfiguration buildConfig(){ CorsConfiguration corsConfiguration = new CorsConfiguration(); corsConfiguration.addAllowedHeader(\"*\"); corsConfiguration.addAllowedOrigin(\"*\"); corsConfiguration.addAllowedMethod(\"*\"); return corsConfiguration; } @Bean public CorsFilter corsFilter() { UrlBasedCorsConfigurationSource source =new UrlBasedCorsConfigurationSource(); source.registerCorsConfiguration(\"/**\",buildConfig()); return new CorsFilter(source); } } ","date":"2020-02-22","objectID":"/posts/java/java%E9%85%8D%E7%BD%AE%E5%85%81%E8%AE%B8%E8%B7%A8%E5%9F%9F%E8%AE%BF%E9%97%AE/:2:0","tags":["java"],"title":"Java配置允许跨域访问","uri":"/posts/java/java%E9%85%8D%E7%BD%AE%E5%85%81%E8%AE%B8%E8%B7%A8%E5%9F%9F%E8%AE%BF%E9%97%AE/"},{"categories":["git"],"content":"目的 清空git项目，获得一个没有历史记录的空项目 ","date":"2020-02-19","objectID":"/posts/git/git%E5%88%A9%E7%94%A8orphan%E5%88%86%E6%94%AF%E5%8A%9F%E8%83%BD%E6%B8%85%E7%A9%BA%E6%89%80%E6%9C%89%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95/:1:0","tags":["git"],"title":"Git利用orphan分支功能清空所有历史记录","uri":"/posts/git/git%E5%88%A9%E7%94%A8orphan%E5%88%86%E6%94%AF%E5%8A%9F%E8%83%BD%E6%B8%85%E7%A9%BA%E6%89%80%E6%9C%89%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95/"},{"categories":["git"],"content":"实现 ## 创建一个orphan分支 $ git checkout --orphan tmp_branch ## 给爷爬~~~~ $ git rm -rf . ## TODO 加一些文件 $ ... ## 提交 $ git add . $ git commit -am \"commit message\" ## 删除master分支 $ git branch -D master ## 重命名当前分支为master $ git branch -m master ## 强制推送到远程 $ git push -f origin master ","date":"2020-02-19","objectID":"/posts/git/git%E5%88%A9%E7%94%A8orphan%E5%88%86%E6%94%AF%E5%8A%9F%E8%83%BD%E6%B8%85%E7%A9%BA%E6%89%80%E6%9C%89%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95/:2:0","tags":["git"],"title":"Git利用orphan分支功能清空所有历史记录","uri":"/posts/git/git%E5%88%A9%E7%94%A8orphan%E5%88%86%E6%94%AF%E5%8A%9F%E8%83%BD%E6%B8%85%E7%A9%BA%E6%89%80%E6%9C%89%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95/"},{"categories":["git"],"content":"tips📌 ","date":"2020-02-19","objectID":"/posts/git/git%E5%88%A9%E7%94%A8orphan%E5%88%86%E6%94%AF%E5%8A%9F%E8%83%BD%E6%B8%85%E7%A9%BA%E6%89%80%E6%9C%89%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95/:3:0","tags":["git"],"title":"Git利用orphan分支功能清空所有历史记录","uri":"/posts/git/git%E5%88%A9%E7%94%A8orphan%E5%88%86%E6%94%AF%E5%8A%9F%E8%83%BD%E6%B8%85%E7%A9%BA%E6%89%80%E6%9C%89%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95/"},{"categories":["git"],"content":"git push -f无权限问题 可能会出现无法强制推送的BUG： Bug\rYou are not allowed to force push code to a protected branch on this project\r配置下Git远程（在 Settings 的 Repository 设置项的 Protected Branches) 展示移除保护，之后恢复就行。 ","date":"2020-02-19","objectID":"/posts/git/git%E5%88%A9%E7%94%A8orphan%E5%88%86%E6%94%AF%E5%8A%9F%E8%83%BD%E6%B8%85%E7%A9%BA%E6%89%80%E6%9C%89%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95/:3:1","tags":["git"],"title":"Git利用orphan分支功能清空所有历史记录","uri":"/posts/git/git%E5%88%A9%E7%94%A8orphan%E5%88%86%E6%94%AF%E5%8A%9F%E8%83%BD%E6%B8%85%E7%A9%BA%E6%89%80%E6%9C%89%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95/"},{"categories":["git"],"content":"–orphan其他用途 可以用于创建一个跟master无关的分支，使一个git管理不同的项目，找个时间再单独开个贴写吧，哈哈哈哈哈 ","date":"2020-02-19","objectID":"/posts/git/git%E5%88%A9%E7%94%A8orphan%E5%88%86%E6%94%AF%E5%8A%9F%E8%83%BD%E6%B8%85%E7%A9%BA%E6%89%80%E6%9C%89%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95/:3:2","tags":["git"],"title":"Git利用orphan分支功能清空所有历史记录","uri":"/posts/git/git%E5%88%A9%E7%94%A8orphan%E5%88%86%E6%94%AF%E5%8A%9F%E8%83%BD%E6%B8%85%E7%A9%BA%E6%89%80%E6%9C%89%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95/"},{"categories":["git"],"content":"项目创建 $ mkdir project-parent $ cd project-parent $ git submodule add git@repo1 $ git submodule add git@repo2 $ git submodule add git@repo3 ## git push ","date":"2020-02-19","objectID":"/posts/git/git%E4%BD%BF%E7%94%A8%E5%AD%90%E6%A8%A1%E5%9D%97%E5%8A%9F%E8%83%BD%E6%90%AD%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97%E6%97%A0%E5%85%B3%E8%81%94idea%E9%A1%B9%E7%9B%AE/:1:0","tags":["git"],"title":"Git使用子模块功能搭建多模块无关联IDEA项目","uri":"/posts/git/git%E4%BD%BF%E7%94%A8%E5%AD%90%E6%A8%A1%E5%9D%97%E5%8A%9F%E8%83%BD%E6%90%AD%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97%E6%97%A0%E5%85%B3%E8%81%94idea%E9%A1%B9%E7%9B%AE/"},{"categories":["git"],"content":"加载项目（他人） $ git clone git@project-parent-repo $ cd project-parent $ git submodule init $ git submodule update ","date":"2020-02-19","objectID":"/posts/git/git%E4%BD%BF%E7%94%A8%E5%AD%90%E6%A8%A1%E5%9D%97%E5%8A%9F%E8%83%BD%E6%90%AD%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97%E6%97%A0%E5%85%B3%E8%81%94idea%E9%A1%B9%E7%9B%AE/:2:0","tags":["git"],"title":"Git使用子模块功能搭建多模块无关联IDEA项目","uri":"/posts/git/git%E4%BD%BF%E7%94%A8%E5%AD%90%E6%A8%A1%E5%9D%97%E5%8A%9F%E8%83%BD%E6%90%AD%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97%E6%97%A0%E5%85%B3%E8%81%94idea%E9%A1%B9%E7%9B%AE/"},{"categories":["git"],"content":"idea idea使用open打开项目 配置 设置jdk 导入子模块 更新maven ","date":"2020-02-19","objectID":"/posts/git/git%E4%BD%BF%E7%94%A8%E5%AD%90%E6%A8%A1%E5%9D%97%E5%8A%9F%E8%83%BD%E6%90%AD%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97%E6%97%A0%E5%85%B3%E8%81%94idea%E9%A1%B9%E7%9B%AE/:3:0","tags":["git"],"title":"Git使用子模块功能搭建多模块无关联IDEA项目","uri":"/posts/git/git%E4%BD%BF%E7%94%A8%E5%AD%90%E6%A8%A1%E5%9D%97%E5%8A%9F%E8%83%BD%E6%90%AD%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97%E6%97%A0%E5%85%B3%E8%81%94idea%E9%A1%B9%E7%9B%AE/"},{"categories":["git"],"content":"子模块的更新 子模块的维护者提交了更新后，使用子模块的项目必须手动更新才能包含最新的提交。 在项目中，进入到子模块目录下，执行 git pull 更新，查看 git log 查看相应提交。 完成后返回到项目目录，可以看到子模块有待提交的更新，使用 git add，提交即可。 ","date":"2020-02-19","objectID":"/posts/git/git%E4%BD%BF%E7%94%A8%E5%AD%90%E6%A8%A1%E5%9D%97%E5%8A%9F%E8%83%BD%E6%90%AD%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97%E6%97%A0%E5%85%B3%E8%81%94idea%E9%A1%B9%E7%9B%AE/:4:0","tags":["git"],"title":"Git使用子模块功能搭建多模块无关联IDEA项目","uri":"/posts/git/git%E4%BD%BF%E7%94%A8%E5%AD%90%E6%A8%A1%E5%9D%97%E5%8A%9F%E8%83%BD%E6%90%AD%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97%E6%97%A0%E5%85%B3%E8%81%94idea%E9%A1%B9%E7%9B%AE/"},{"categories":["git"],"content":"删除子模块 有时子模块的项目维护地址发生了变化，或者需要替换子模块，就需要删除原有的子模块。 删除子模块较复杂，步骤如下： rm -rf 子模块目录 删除子模块目录及源码 vi .gitmodules 删除项目目录下.gitmodules 文件中子模块相关条目 vi .git/config 删除配置项中子模块相关条目 rm .git/module/* 删除模块下的子模块目录，每个子模块对应一个目录，注意只删除对应的子模块目录即可 执行完成后，再执行添加子模块命令即可，如果仍然报错，执行如下： git rm --cached 子模块名称 完成删除后，提交到仓库即可。 ","date":"2020-02-19","objectID":"/posts/git/git%E4%BD%BF%E7%94%A8%E5%AD%90%E6%A8%A1%E5%9D%97%E5%8A%9F%E8%83%BD%E6%90%AD%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97%E6%97%A0%E5%85%B3%E8%81%94idea%E9%A1%B9%E7%9B%AE/:5:0","tags":["git"],"title":"Git使用子模块功能搭建多模块无关联IDEA项目","uri":"/posts/git/git%E4%BD%BF%E7%94%A8%E5%AD%90%E6%A8%A1%E5%9D%97%E5%8A%9F%E8%83%BD%E6%90%AD%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97%E6%97%A0%E5%85%B3%E8%81%94idea%E9%A1%B9%E7%9B%AE/"},{"categories":["java"],"content":" TABLE：使用一个特定的数据库表格来保存主键。 SEQUENCE：根据底层数据库的序列来生成主键，条件是数据库支持序列。 IDENTITY：主键由数据库自动生成（主要是自动增长型） AUTO：主键由程序控制。 ","date":"2020-02-17","objectID":"/posts/java/jpa-id%E8%87%AA%E5%A2%9E%E7%AD%96%E7%95%A5/:0:0","tags":["java"],"title":"Jpa Id自增策略","uri":"/posts/java/jpa-id%E8%87%AA%E5%A2%9E%E7%AD%96%E7%95%A5/"},{"categories":["java"],"content":"问题 配置全局返回时 @Configuration public class GlobalReturnConfig { @RestControllerAdvice(basePackages = \"com.benyuan\") static class ResultResponseAdvice implements ResponseBodyAdvice\u003cObject\u003e { @Override public boolean supports(MethodParameter methodParameter, Class\u003c? extends HttpMessageConverter\u003c?\u003e\u003e aClass) { return true; } @Override public Object beforeBodyWrite(Object body, MethodParameter methodParameter, MediaType mediaType, Class\u003c? extends HttpMessageConverter\u003c?\u003e\u003e aClass, ServerHttpRequest serverHttpRequest, ServerHttpResponse serverHttpResponse) { if (body instanceof ResponseDTO) { return body; } return ResponseDTOUtil.success(body); } } } beforeBodyWrite方法在处理String类型返回值的时候，会造成ResponseDTO can not be cast to String的BUG ","date":"2020-02-17","objectID":"/posts/java/%E4%BD%BF%E7%94%A8responsebodyadvice%E7%9A%84beforebodywrite%E5%A4%84%E7%90%86string%E5%AF%BC%E8%87%B4cast%E9%97%AE%E9%A2%98/:1:0","tags":["java"],"title":"使用ResponseBodyAdvice的beforeBodyWrite处理String导致cast问题","uri":"/posts/java/%E4%BD%BF%E7%94%A8responsebodyadvice%E7%9A%84beforebodywrite%E5%A4%84%E7%90%86string%E5%AF%BC%E8%87%B4cast%E9%97%AE%E9%A2%98/"},{"categories":["java"],"content":"解决 /** * 使用RestControllerAdvice的beforeBodyWrite方法时，在处理String时，实际处理的HttpMessageConverter，应该是MappingJackson2HttpMessageConverter * @Description */ @Configuration public class WebConfiguration implements WebMvcConfigurer { @Override public void configureMessageConverters(List\u003cHttpMessageConverter\u003c?\u003e\u003e converters) { // 0-1可配，2-8是默认加载的 converters.add(0, new MappingJackson2HttpMessageConverter()); } } ","date":"2020-02-17","objectID":"/posts/java/%E4%BD%BF%E7%94%A8responsebodyadvice%E7%9A%84beforebodywrite%E5%A4%84%E7%90%86string%E5%AF%BC%E8%87%B4cast%E9%97%AE%E9%A2%98/:2:0","tags":["java"],"title":"使用ResponseBodyAdvice的beforeBodyWrite处理String导致cast问题","uri":"/posts/java/%E4%BD%BF%E7%94%A8responsebodyadvice%E7%9A%84beforebodywrite%E5%A4%84%E7%90%86string%E5%AF%BC%E8%87%B4cast%E9%97%AE%E9%A2%98/"},{"categories":["java"],"content":"声明 本人是idea开源作者，可以在合理的范围内使用正版idea，此方法只供需要的人了解学习使用 ","date":"2020-02-17","objectID":"/posts/java/idea%E7%A0%B4%E8%A7%A3/:1:0","tags":["java"],"title":"IDEA破解","uri":"/posts/java/idea%E7%A0%B4%E8%A7%A3/"},{"categories":["java"],"content":"方法 $ vim /Applications/IntelliJ\\ IDEA.app/Contents/MacOS # q 退出 $ vim ~/Library/Preferences/IntelliJIdea2019.3/idea.vmoptions # 末尾插入 -javaagent:{jb-agent-path} ","date":"2020-02-17","objectID":"/posts/java/idea%E7%A0%B4%E8%A7%A3/:2:0","tags":["java"],"title":"IDEA破解","uri":"/posts/java/idea%E7%A0%B4%E8%A7%A3/"},{"categories":["git"],"content":"什么是 HEAD Git 中的 HEAD 可以理解为指针，指向当前仓库所处的分支。一般在有 Git 管理的目录下打开 Git 终端都能在当前路径的尾巴上，看到所处的分支名。 还可以在命令行中输入 cat .git/HEAD 查看当前 HEAD 指向哪里。 一般它指向当前工作目录所在分支的最新提交 ","date":"2020-02-17","objectID":"/posts/git/git%E4%B8%ADhead%E6%B8%B8%E7%A6%BB%E7%9A%84%E5%8E%9F%E5%9B%A0%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/:1:0","tags":["git"],"title":"Git中HEAD游离的原因与解决方法","uri":"/posts/git/git%E4%B8%ADhead%E6%B8%B8%E7%A6%BB%E7%9A%84%E5%8E%9F%E5%9B%A0%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"},{"categories":["git"],"content":"如何造成 HEAD 的游离状态 一般我们会使用命令 git checkout 来切换分支，HEAD 就会移动到指定的分支上 但是，如果我们使用的是 git checkout 来切换到指定的某一次提交，HEAD 就会处于「detached」状态，也就是游离状态 ","date":"2020-02-17","objectID":"/posts/git/git%E4%B8%ADhead%E6%B8%B8%E7%A6%BB%E7%9A%84%E5%8E%9F%E5%9B%A0%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/:2:0","tags":["git"],"title":"Git中HEAD游离的原因与解决方法","uri":"/posts/git/git%E4%B8%ADhead%E6%B8%B8%E7%A6%BB%E7%9A%84%E5%8E%9F%E5%9B%A0%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"},{"categories":["git"],"content":"HEAD 游离状态的利弊 好处：HEAD 处于游离状态时，开发者可以很方便地在历史版本之间互相切换，比如要回到某次提交，只需要 checkout 对应的 commit id 或者 tag 名即可。 弊端：若在该基础上进行了提交，则会新开一个「匿名分支」；也就是说我们的提交是无法可见保存的，一旦切换到别的分支，原游离状态以后的提交就不可追溯了。 ","date":"2020-02-17","objectID":"/posts/git/git%E4%B8%ADhead%E6%B8%B8%E7%A6%BB%E7%9A%84%E5%8E%9F%E5%9B%A0%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/:3:0","tags":["git"],"title":"Git中HEAD游离的原因与解决方法","uri":"/posts/git/git%E4%B8%ADhead%E6%B8%B8%E7%A6%BB%E7%9A%84%E5%8E%9F%E5%9B%A0%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"},{"categories":["git"],"content":"如何解决 在切换到游离状态的时候应该新建一个分支，然后我们所有的操作修改和提交都会保存到该分支，HEAD 也就指向了该分支最新提交的 commit id 处，而不会再处于游离状态。 查看当前领先多少 $ git branch -v 新建分支保存，2选1，根据实际情况 ## 方式一： 当前所有复制到新的分支 $ git branch -b callback ## 方式二：用commit_id去新建分支，达到控制版本的目的，commit_id为你提交时拿到的id，通过分支名去操作id $ git branch callback commit_id 切换回工作分支（假设当前分支为dev），并合刚刚新建的分支 # 回到工作分支 $ git checkout dev # 合并刚刚新建的分支 $ git merge callback # 查看下合并结果，有冲突就解决 $ git status # 好习惯 $ git pull # 没有问题可以push $ git push 删除分支 $ git branch -d callback ","date":"2020-02-17","objectID":"/posts/git/git%E4%B8%ADhead%E6%B8%B8%E7%A6%BB%E7%9A%84%E5%8E%9F%E5%9B%A0%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/:4:0","tags":["git"],"title":"Git中HEAD游离的原因与解决方法","uri":"/posts/git/git%E4%B8%ADhead%E6%B8%B8%E7%A6%BB%E7%9A%84%E5%8E%9F%E5%9B%A0%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"},{"categories":["docker"],"content":" screen screen ~/Library/Containers/com.docker.docker/Data/vms/0/tty 会出现如下界面 键入回车，出现如下界面 像正常linux系统一样设置 sysctl -w vm.max_map_count=262144 按control+a，再按control+\\ ，左下角出现退出提示后，按y确认退出 ","date":"2020-02-17","objectID":"/posts/docker/mac%E7%B3%BB%E7%BB%9F%E4%B8%8B%E4%BF%AE%E6%94%B9docker%E7%9A%84vm%E5%8F%82%E6%95%B0/:0:0","tags":["docker"],"title":"Mac系统下修改docker的vm参数","uri":"/posts/docker/mac%E7%B3%BB%E7%BB%9F%E4%B8%8B%E4%BF%AE%E6%94%B9docker%E7%9A%84vm%E5%8F%82%E6%95%B0/"},{"categories":["docker"],"content":"1. 创建数据目录 #创建数据/日志目录 这里我们部署3个节点 $ mkdir /opt/elasticsearch/data/{es01,es02,es03} -p mkdir /opt/elasticsearch/logs/{es01,es02,es03} -p cd /opt/elasticsearch #权限 chmod 0777 data/* -R \u0026\u0026 chmod 0777 logs/* -R #防止JVM报错 echo vm.max_map_count=262144 \u003e\u003e /etc/sysctl.conf sysctl -p ","date":"2020-02-17","objectID":"/posts/docker/docker%E9%83%A8%E7%BD%B2eskibana%E5%B9%B6%E9%85%8D%E7%BD%AEik%E5%88%86%E8%AF%8D/:1:0","tags":["docker"],"title":"Docker部署ES、kibana并配置ik分词","uri":"/posts/docker/docker%E9%83%A8%E7%BD%B2eskibana%E5%B9%B6%E9%85%8D%E7%BD%AEik%E5%88%86%E8%AF%8D/"},{"categories":["docker"],"content":"2. ES集群安装 version: '2.2' services: es01: image: docker.elastic.co/elasticsearch/elasticsearch:7.5.1 container_name: es01 environment: # node名称 - node.name=es01 # 集群名称 - cluster.name=es-docker-cluster # 节点配置 - discovery.seed_hosts=es02,es03 - cluster.initial_master_nodes=es01,es02,es03 # 锁定进程的物理内存地址避免交换（swapped）来提高性能 - bootstrap.memory_lock=true # 开启跨域cors，已便使用Head插件 - http.cors.enabled=true - http.cors.allow-origin=* # Jvm内存大小配置 - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\" ulimits: memlock: soft: -1 hard: -1 volumes: # - data01:/usr/share/elasticsearch/data - ./data/es01:/usr/share/elasticsearch/data - ./logs/es01:/usr/share/elasticsearch/logs ports: - 9200:9200 networks: - elastic es02: image: docker.elastic.co/elasticsearch/elasticsearch:7.5.1 container_name: es02 environment: # node名称 - node.name=es02 # 集群名称 - cluster.name=es-docker-cluster # 节点配置 - discovery.seed_hosts=es01,es03 - cluster.initial_master_nodes=es01,es02,es03 # 锁定进程的物理内存地址避免交换（swapped）来提高性能 - bootstrap.memory_lock=true # 开启跨域cors，已便使用Head插件 - http.cors.enabled=true - http.cors.allow-origin=* # Jvm内存大小配置 - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\" ulimits: memlock: soft: -1 hard: -1 volumes: # - data02:/usr/share/elasticsearch/data - ./data/es02:/usr/share/elasticsearch/data - ./logs/es02:/usr/share/elasticsearch/logs # 可以不开放 ports: - 9201:9200 networks: - elastic es03: image: docker.elastic.co/elasticsearch/elasticsearch:7.5.1 container_name: es03 environment: # node名称 - node.name=es03 # 集群名称 - cluster.name=es-docker-cluster # 节点配置 - discovery.seed_hosts=es01,es02 - cluster.initial_master_nodes=es01,es02,es03 # 锁定进程的物理内存地址避免交换（swapped）来提高性能 - bootstrap.memory_lock=true # 开启跨域cors，已便使用Head插件 - http.cors.enabled=true - http.cors.allow-origin=* # Jvm内存大小配置 - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\" ulimits: memlock: soft: -1 hard: -1 volumes: # - data03:/usr/share/elasticsearch/data - ./data/es03:/usr/share/elasticsearch/data - ./logs/es03:/usr/share/elasticsearch/logs # 可以不开放 ports: - 9202:9200 networks: - elastic volumes: data01: driver: local data02: driver: local data03: driver: local networks: elastic: driver: bridge ","date":"2020-02-17","objectID":"/posts/docker/docker%E9%83%A8%E7%BD%B2eskibana%E5%B9%B6%E9%85%8D%E7%BD%AEik%E5%88%86%E8%AF%8D/:2:0","tags":["docker"],"title":"Docker部署ES、kibana并配置ik分词","uri":"/posts/docker/docker%E9%83%A8%E7%BD%B2eskibana%E5%B9%B6%E9%85%8D%E7%BD%AEik%E5%88%86%E8%AF%8D/"},{"categories":["docker"],"content":"3. 启动 docker-compose up -d ","date":"2020-02-17","objectID":"/posts/docker/docker%E9%83%A8%E7%BD%B2eskibana%E5%B9%B6%E9%85%8D%E7%BD%AEik%E5%88%86%E8%AF%8D/:3:0","tags":["docker"],"title":"Docker部署ES、kibana并配置ik分词","uri":"/posts/docker/docker%E9%83%A8%E7%BD%B2eskibana%E5%B9%B6%E9%85%8D%E7%BD%AEik%E5%88%86%E8%AF%8D/"},{"categories":["docker"],"content":"4. 安装ik分词插件 // 集群 $ docker-compose exec es01 elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.5.1/elasticsearch-analysis-ik-7.5.1.zip $ docker-compose exec es02 elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.5.1/elasticsearch-analysis-ik-7.5.1.zip $ docker-compose exec es03 elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.5.1/elasticsearch-analysis-ik-7.5.1.zip //然后要重启es容器 $ docker-compose restart es01 $ docker-compose restart es02 $ docker-compose restart es03 ","date":"2020-02-17","objectID":"/posts/docker/docker%E9%83%A8%E7%BD%B2eskibana%E5%B9%B6%E9%85%8D%E7%BD%AEik%E5%88%86%E8%AF%8D/:4:0","tags":["docker"],"title":"Docker部署ES、kibana并配置ik分词","uri":"/posts/docker/docker%E9%83%A8%E7%BD%B2eskibana%E5%B9%B6%E9%85%8D%E7%BD%AEik%E5%88%86%E8%AF%8D/"},{"categories":["docker"],"content":"5. 构建elasticsearch-head镜像（可跳过） #Docker image of elasticsearch-head # VERSION 6 # Author: bolingcavalry #基础镜像使用node:10.15.0，以便通过npm来安装head插件 FROM node:10.15.0-alpine #作者 MAINTAINER BolingCavalry \u003czq2599@gmail.com\u003e #定义下载源文件的路径 ENV SRC_DOWN_PATH /usr/src/app #创建文件夹用于保存下载的源码 RUN mkdir -p $SRC_DOWN_PATH \u0026\u0026 \\ #进入该文件夹 cd $SRC_DOWN_PATH \u0026\u0026 \\ #下载源码 wget https://codeload.github.com/mobz/elasticsearch-head/zip/master \u0026\u0026 \\ #解压 unzip master \u0026\u0026 \\ #解压后，压缩文件可以删除了 rm master \u0026\u0026 \\ #进入解压后的文件夹 cd elasticsearch-head-master \u0026\u0026 \\ #设置为taobao，加速npm安装速度 npm config set registry http://registry.npm.taobao.org \u0026\u0026 \\ #安装grunt npm install -g grunt-cli \u0026\u0026 \\ #安装head npm install #设置默认工作目录为解压后的源码文件夹 WORKDIR $SRC_DOWN_PATH/elasticsearch-head-master #保留9100端口 EXPOSE 9100 #启动时即启动head服务 CMD [ \"grunt\", \"server\" ] ","date":"2020-02-17","objectID":"/posts/docker/docker%E9%83%A8%E7%BD%B2eskibana%E5%B9%B6%E9%85%8D%E7%BD%AEik%E5%88%86%E8%AF%8D/:5:0","tags":["docker"],"title":"Docker部署ES、kibana并配置ik分词","uri":"/posts/docker/docker%E9%83%A8%E7%BD%B2eskibana%E5%B9%B6%E9%85%8D%E7%BD%AEik%E5%88%86%E8%AF%8D/"},{"categories":["docker"],"content":"6. kibana version: '2.2' services: kibana: image: docker.elastic.co/kibana/kibana:6.0.0 container_name: kibana environment: - ELASTICSEARCH_URL=http://***.***.***.***:9200 ports: - 5601:5601 ","date":"2020-02-17","objectID":"/posts/docker/docker%E9%83%A8%E7%BD%B2eskibana%E5%B9%B6%E9%85%8D%E7%BD%AEik%E5%88%86%E8%AF%8D/:6:0","tags":["docker"],"title":"Docker部署ES、kibana并配置ik分词","uri":"/posts/docker/docker%E9%83%A8%E7%BD%B2eskibana%E5%B9%B6%E9%85%8D%E7%BD%AEik%E5%88%86%E8%AF%8D/"},{"categories":["docker"],"content":"7. 踩坑记录 安装过程出现问题，断线，导致无法重新安装analysis-ik，也无法卸载analysis-ik 解决： ## 查看已安装插件 $ docker-compose exec es01 elasticsearch-plugin list ## 移除转一半到插件 $ docker-compose exec es01 elasticsearch-plugin remove .installing-xxxx ## TODO 重新安装 ","date":"2020-02-17","objectID":"/posts/docker/docker%E9%83%A8%E7%BD%B2eskibana%E5%B9%B6%E9%85%8D%E7%BD%AEik%E5%88%86%E8%AF%8D/:7:0","tags":["docker"],"title":"Docker部署ES、kibana并配置ik分词","uri":"/posts/docker/docker%E9%83%A8%E7%BD%B2eskibana%E5%B9%B6%E9%85%8D%E7%BD%AEik%E5%88%86%E8%AF%8D/"},{"categories":["做饭"],"content":"工具 锅 ","date":"2020-02-16","objectID":"/posts/cook/%E8%85%8A%E8%82%A0%E7%82%92%E8%8D%B7%E5%85%B0%E8%B1%86/:1:0","tags":["做饭"],"title":"腊肠炒荷兰豆","uri":"/posts/cook/%E8%85%8A%E8%82%A0%E7%82%92%E8%8D%B7%E5%85%B0%E8%B1%86/"},{"categories":["做饭"],"content":"食材 腊肠 1~2根 荷兰豆 200g 盐 适量 耗油 1小勺 蒜粒 1瓣 花生油 适量 开水 少许 ","date":"2020-02-16","objectID":"/posts/cook/%E8%85%8A%E8%82%A0%E7%82%92%E8%8D%B7%E5%85%B0%E8%B1%86/:2:0","tags":["做饭"],"title":"腊肠炒荷兰豆","uri":"/posts/cook/%E8%85%8A%E8%82%A0%E7%82%92%E8%8D%B7%E5%85%B0%E8%B1%86/"},{"categories":["做饭"],"content":"步骤 ","date":"2020-02-16","objectID":"/posts/cook/%E8%85%8A%E8%82%A0%E7%82%92%E8%8D%B7%E5%85%B0%E8%B1%86/:3:0","tags":["做饭"],"title":"腊肠炒荷兰豆","uri":"/posts/cook/%E8%85%8A%E8%82%A0%E7%82%92%E8%8D%B7%E5%85%B0%E8%B1%86/"},{"categories":["做饭"],"content":"准备 荷兰豆掐头去筋，清洗； 腊肠斜刀切片； 蒜粒去衣切碎； ","date":"2020-02-16","objectID":"/posts/cook/%E8%85%8A%E8%82%A0%E7%82%92%E8%8D%B7%E5%85%B0%E8%B1%86/:3:1","tags":["做饭"],"title":"腊肠炒荷兰豆","uri":"/posts/cook/%E8%85%8A%E8%82%A0%E7%82%92%E8%8D%B7%E5%85%B0%E8%B1%86/"},{"categories":["做饭"],"content":"制作 起锅，加入适量的花生油； 倒入蒜碎，炒香； 倒入腊肠，小火煸炒出油； 加入荷兰豆，翻炒均匀； 加入少许开水，继续翻炒4~5分钟； 加入盐，耗油，翻炒均匀，出锅； ","date":"2020-02-16","objectID":"/posts/cook/%E8%85%8A%E8%82%A0%E7%82%92%E8%8D%B7%E5%85%B0%E8%B1%86/:3:2","tags":["做饭"],"title":"腊肠炒荷兰豆","uri":"/posts/cook/%E8%85%8A%E8%82%A0%E7%82%92%E8%8D%B7%E5%85%B0%E8%B1%86/"},{"categories":["做饭"],"content":"成果 ","date":"2020-02-16","objectID":"/posts/cook/%E8%85%8A%E8%82%A0%E7%82%92%E8%8D%B7%E5%85%B0%E8%B1%86/:4:0","tags":["做饭"],"title":"腊肠炒荷兰豆","uri":"/posts/cook/%E8%85%8A%E8%82%A0%E7%82%92%E8%8D%B7%E5%85%B0%E8%B1%86/"},{"categories":["java"],"content":"java8 关于时间、日期处理 Java 8 推出了全新的日期时间 API。 Java 处理日期、日历和时间的方式一直为社区所诟病，将 java.util.Date 设定为可变类型，以及 SimpleDateFormat 的非线程安全使其应用非常受限。 新 API 基于 ISO 标准日历系统，java.time 包下的所有类都是不可变类型而且线程安全。 编号 类的名称 描述 1 Instant 时间戳 2 Duration 持续时间，时间差 3 LocalDate 只包含日期，比如：2018-02-05 4 LocalTime 只包含时间，比如：23:12:10 5 LocalDateTime 包含日期和时间，比如：2018-02-05 23:14:21 6 Period 时间段 7 ZoneOffset 时区偏移量，比如：+8:00 8 ZonedDateTime 带时区的时间 9 Clock 时钟，比如获取目前美国纽约的时间 10 java.time.format.DateTimeFormatter 时间格式化 ","date":"2020-02-15","objectID":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/:1:0","tags":["java"],"title":"Java8的18个时间处理实践","uri":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/"},{"categories":["java"],"content":"LocalDate ","date":"2020-02-15","objectID":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/:2:0","tags":["java"],"title":"Java8的18个时间处理实践","uri":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/"},{"categories":["java"],"content":"1.获取今天的日期 Java 8 中的 LocalDate 用于表示当天日期。和 java.util.Date 不同，它只有日期，不包含时间。当你仅需要表示日期时就用这个类。 LocalDate today = LocalDate.now(); System.out.println(\"今天的日期:\"+today); ","date":"2020-02-15","objectID":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/:2:1","tags":["java"],"title":"Java8的18个时间处理实践","uri":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/"},{"categories":["java"],"content":"2.获取年、月、日信息 LocalDate today = LocalDate.now(); int year = today.getYear(); int month = today.getMonthValue(); int day = today.getDayOfMonth(); System.out.println(\"year:\"+year); System.out.println(\"month:\"+month); System.out.println(\"day:\"+day); ","date":"2020-02-15","objectID":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/:2:2","tags":["java"],"title":"Java8的18个时间处理实践","uri":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/"},{"categories":["java"],"content":"3.处理特定日期 我们通过静态工厂方法 now () 非常容易地创建了当天日期，你还可以调用另一个有用的工厂方法 LocalDate.of () 创建任意日期， 该方法需要传入年、月、日做参数，返回对应的 LocalDate 实例。这个方法的好处是没再犯老 API 的设计错误，比如年度起始于 1900，月份是从 0 开 始等等。 LocalDate date = LocalDate.of(2018,2,6); System.out.println(\"自定义日期:\"+date); ","date":"2020-02-15","objectID":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/:2:3","tags":["java"],"title":"Java8的18个时间处理实践","uri":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/"},{"categories":["java"],"content":"4.判断两个日期是否相等 使用 equals LocalDate date1 = LocalDate.now(); LocalDate date2 = LocalDate.of(2020,2,15); if(date1.equals(date2)){ System.out.println(\"时间相等\"); }else{ System.out.println(\"时间不等\"); } ","date":"2020-02-15","objectID":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/:2:4","tags":["java"],"title":"Java8的18个时间处理实践","uri":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/"},{"categories":["java"],"content":"5.计算一周后的日期（周计算） LocalDate 日期不包含时间信息，它的 plus () 方法用来增加天、周、月，ChronoUnit 类声明了这些时间单位。由于 LocalDate 也是不变类型，返回后一定要用变量赋值。 Local Date today = LocalDate.now(); System.out.println(\"今天的日期为:\"+today); LocalDate nextWeek = today.plus(1, ChronoUnit.WEEKS); System.out.println(\"一周后的日期为:\"+nextWeek); ","date":"2020-02-15","objectID":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/:2:5","tags":["java"],"title":"Java8的18个时间处理实践","uri":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/"},{"categories":["java"],"content":"6.计算一年前或一年后的日期 LocalDate today = LocalDate.now(); LocalDate previousYear = today.minus(1, ChronoUnit.YEARS); System.out.println(\"一年前的日期 : \" + previousYear); LocalDate nextYear = today.plus(1, ChronoUnit.YEARS); System.out.println(\"一年后的日期:\"+nextYear); ","date":"2020-02-15","objectID":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/:2:6","tags":["java"],"title":"Java8的18个时间处理实践","uri":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/"},{"categories":["java"],"content":"7.判断日期是早于还是晚于另一个日期 在 Java 8 中，LocalDate 类有两类方法 isBefore () 和 isAfter () 用于比较日期。调用 isBefore () 方法时，如果给定日期小于当前日期则返回 true。 LocalDate today = LocalDate.now(); LocalDate tomorrow = LocalDate.of(2020,2,16); if(tomorrow.isAfter(today)){ System.out.println(\"之后的日期:\"+tomorrow); } LocalDate yesterday = today.minus(1, ChronoUnit.DAYS); if(yesterday.isBefore(today)){ System.out.println(\"之前的日期:\"+yesterday); } ","date":"2020-02-15","objectID":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/:2:7","tags":["java"],"title":"Java8的18个时间处理实践","uri":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/"},{"categories":["java"],"content":"8.检查闰年 在 Java 8 中，LocalDate 类有isLeapYear()方法 LocalDate today = LocalDate.now(); if(today.isLeapYear()){ System.out.println(\"This year is Leap year\"); }else { System.out.println(\"2018 is not a Leap year\"); } ","date":"2020-02-15","objectID":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/:2:8","tags":["java"],"title":"Java8的18个时间处理实践","uri":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/"},{"categories":["java"],"content":"LocalTime ","date":"2020-02-15","objectID":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/:3:0","tags":["java"],"title":"Java8的18个时间处理实践","uri":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/"},{"categories":["java"],"content":"9.获取当前时间 LocalTime time = LocalTime.now(); System.out.println(\"获取当前的时间,不含有日期:\"+time); ","date":"2020-02-15","objectID":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/:3:1","tags":["java"],"title":"Java8的18个时间处理实践","uri":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/"},{"categories":["java"],"content":"10. 时间计算（小时计算） 通过增加小时、分、秒来计算将来的时间很常见。Java 8 除了不变类型和线程安全的好处之外，还提供了更好的 plusHours () 方法替换 add ()，并且是兼容的。注意，这些方法返回一个全新的 LocalTime 实例，由于其不可变性，返回后一定要用变量赋值。 LocalTime time = LocalTime.now(); LocalTime newTime = time.plusHours(3); System.out.println(\"三个小时后的时间为:\"+newTime); ","date":"2020-02-15","objectID":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/:3:2","tags":["java"],"title":"Java8的18个时间处理实践","uri":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/"},{"categories":["java"],"content":"Clock ","date":"2020-02-15","objectID":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/:4:0","tags":["java"],"title":"Java8的18个时间处理实践","uri":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/"},{"categories":["java"],"content":"11. Clock 时钟类 Java 8 增加了一个 Clock 时钟类用于获取当时的时间戳，或当前时区下的日期时间信息。以前用到 System.currentTimeInMillis () 和 TimeZone.getDefault () 的地方都可用 Clock 替换。 // Returns the current time based on your system clock and set to UTC. Clock clock = Clock.systemUTC(); System.out.println(\"Clock : \" + clock.millis()); // Returns time based on system clock zone Clock defaultClock = Clock.systemDefaultZone(); System.out.println(\"Clock : \" + defaultClock.millis()); ","date":"2020-02-15","objectID":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/:4:1","tags":["java"],"title":"Java8的18个时间处理实践","uri":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/"},{"categories":["java"],"content":"ZonedDateTime ZoneId 来处理特定时区，ZoneDateTime 类来表示某时区下的时间 ","date":"2020-02-15","objectID":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/:5:0","tags":["java"],"title":"Java8的18个时间处理实践","uri":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/"},{"categories":["java"],"content":"12.Java 8 中处理时区 这在 Java 8 以前都是 GregorianCalendar 类来做的。 // Date and time with timezone in Java 8 ZoneId america = ZoneId.of(\"America/New_York\"); LocalDateTime localtDateAndTime = LocalDateTime.now(); ZonedDateTime dateAndTimeInNewYork = ZonedDateTime.of(localtDateAndTime, america ); System.out.println(\"Current date and time in a particular timezone : \" + dateAndTimeInNewYork); ","date":"2020-02-15","objectID":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/:5:1","tags":["java"],"title":"Java8的18个时间处理实践","uri":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/"},{"categories":["java"],"content":"YearMonth、MonthDay ","date":"2020-02-15","objectID":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/:6:0","tags":["java"],"title":"Java8的18个时间处理实践","uri":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/"},{"categories":["java"],"content":"13.检查像生日这种周期性事件 LocalDate date1 = LocalDate.now(); LocalDate date2 = LocalDate.of(2020,2,15); MonthDay birthday = MonthDay.of(date2.getMonth(),date2.getDayOfMonth()); MonthDay currentMonthDay = MonthDay.from(date1); if(currentMonthDay.equals(birthday)){ System.out.println(\"是你的生日\"); }else{ System.out.println(\"你的生日还没有到\"); } 只要当天的日期和生日匹配，无论是哪一年都会打印出祝贺信息。你可以把程序整合进系统时钟，看看生日时是否会受到提醒，或者写一个单元测试来检测代码是否运行正确。 ","date":"2020-02-15","objectID":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/:6:1","tags":["java"],"title":"Java8的18个时间处理实践","uri":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/"},{"categories":["java"],"content":"14.如何表示信用卡到期这类固定日期 YearMonth 用于表示信用卡到期日、FD 到期日、期货期权到期日等 得到 当月共有多少天，YearMonth 实例的 lengthOfMonth () 方法可以返回当月的天数，在判断 2 月有 28 天还是 29 天时非常有用 YearMonth currentYearMonth = YearMonth.now(); System.out.printf(\"Days in month year %s: %d%n\", currentYearMonth, currentYearMonth.lengthOfMonth()); YearMonth creditCardExpiry = YearMonth.of(2019, Month.FEBRUARY); System.out.printf(\"Your credit card expires on %s %n\", creditCardExpiry); ","date":"2020-02-15","objectID":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/:6:2","tags":["java"],"title":"Java8的18个时间处理实践","uri":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/"},{"categories":["java"],"content":"其他 ","date":"2020-02-15","objectID":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/:7:0","tags":["java"],"title":"Java8的18个时间处理实践","uri":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/"},{"categories":["java"],"content":"15.计算两个日期之间的天数和月数 在 Java 8 中可以用 java.time.Period 类来做计算 LocalDate today = LocalDate.now(); LocalDate java8Release = LocalDate.of(2018, 12, 14); Period periodToNextJavaRelease = Period.between(today, java8Release); System.out.println(\"Months left between today and Java 8 release : \" + periodToNextJavaRelease.getMonths() ); ","date":"2020-02-15","objectID":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/:7:1","tags":["java"],"title":"Java8的18个时间处理实践","uri":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/"},{"categories":["java"],"content":"16.获取当前的时间戳 Instant timestamp = Instant.now(); System.out.println(\"What is value of this instant \" + timestamp.toEpochMilli()); 时间戳信息里同时包含了日期和时间，这和 java.util.Date 很像。实际上 Instant 类确实等同于 Java 8 之前的 Date 类，你可以使用 Date 类和 Instant 类各自的转换方法互相转换，例如：Date.from (Instant) 将 Instant 转换成 java.util.Date，Date.toInstant () 则是将 Date 类转换成 Instant 类。 ","date":"2020-02-15","objectID":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/:7:2","tags":["java"],"title":"Java8的18个时间处理实践","uri":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/"},{"categories":["java"],"content":"17.使用预定义的格式化工具去解析或格式化日期 String dayAfterTommorrow = \"20180205\"; LocalDate formatted = LocalDate.parse(dayAfterTommorrow,DateTimeFormatter.BASIC_ISO_DATE); System.out.println(dayAfterTommorrow+\" 格式化后的日期为: \"+formatted); ","date":"2020-02-15","objectID":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/:7:3","tags":["java"],"title":"Java8的18个时间处理实践","uri":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/"},{"categories":["java"],"content":"18.字符串互转日期类型 LocalDateTime date = LocalDateTime.now(); DateTimeFormatter format1 = DateTimeFormatter.ofPattern(\"yyyy/MM/dd HH:mm:ss\"); //日期转字符串 String str = date.format(format1); System.out.println(\"日期转换为字符串:\"+str); DateTimeFormatter format2 = DateTimeFormatter.ofPattern(\"yyyy/MM/dd HH:mm:ss\"); //字符串转日期 LocalDate date2 = LocalDate.parse(str,format2); System.out.println(\"日期类型:\"+date2); ","date":"2020-02-15","objectID":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/:7:4","tags":["java"],"title":"Java8的18个时间处理实践","uri":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/"},{"categories":["java"],"content":"巨人肩膀 18 个 Java8 日期处理的实践，太有用了！ ","date":"2020-02-15","objectID":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/:8:0","tags":["java"],"title":"Java8的18个时间处理实践","uri":"/posts/java/java8%E7%9A%8418%E4%B8%AA%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/"},{"categories":["做饭"],"content":"工具 平底锅； 锡纸； 铁盆； 肉夹子（可用筷子🥢代替）； ","date":"2020-02-13","objectID":"/posts/cook/%E9%A6%99%E7%85%8E%E8%84%86%E7%9A%AE%E9%B8%A1%E6%8E%92/:1:0","tags":["做饭"],"title":"香煎脆皮鸡排","uri":"/posts/cook/%E9%A6%99%E7%85%8E%E8%84%86%E7%9A%AE%E9%B8%A1%E6%8E%92/"},{"categories":["做饭"],"content":"食材 鸡腿 1~2个；🍗 盐🧂 1小勺； 酱油 1小勺； 料酒 1小勺； ","date":"2020-02-13","objectID":"/posts/cook/%E9%A6%99%E7%85%8E%E8%84%86%E7%9A%AE%E9%B8%A1%E6%8E%92/:2:0","tags":["做饭"],"title":"香煎脆皮鸡排","uri":"/posts/cook/%E9%A6%99%E7%85%8E%E8%84%86%E7%9A%AE%E9%B8%A1%E6%8E%92/"},{"categories":["做饭"],"content":"步骤 ","date":"2020-02-13","objectID":"/posts/cook/%E9%A6%99%E7%85%8E%E8%84%86%E7%9A%AE%E9%B8%A1%E6%8E%92/:3:0","tags":["做饭"],"title":"香煎脆皮鸡排","uri":"/posts/cook/%E9%A6%99%E7%85%8E%E8%84%86%E7%9A%AE%E9%B8%A1%E6%8E%92/"},{"categories":["做饭"],"content":"准备 鸡腿去骨 沿着骨头🦴竖直方向，划一刀； 绕着骨头根部切断脚筋； 剃下鸡腿肉； 剃下来的鸡腿排，横向切两刀，切断筋膜； 碗中🥣放入鸡腿排，加入盐🧂、酱油、料酒抓拌均匀，腌制15分钟备用； ","date":"2020-02-13","objectID":"/posts/cook/%E9%A6%99%E7%85%8E%E8%84%86%E7%9A%AE%E9%B8%A1%E6%8E%92/:3:1","tags":["做饭"],"title":"香煎脆皮鸡排","uri":"/posts/cook/%E9%A6%99%E7%85%8E%E8%84%86%E7%9A%AE%E9%B8%A1%E6%8E%92/"},{"categories":["做饭"],"content":"制作 冷锅放入鸡腿排，鸡皮的一面朝下； 取一张锡箔纸，盖住鸡腿排，铁盆中加入水，压在锡箔纸上； 煎制6分钟后，将鸡腿排翻面，继续压好； 煎制2 分钟后，将鸡腿排重新翻面，继续压好，煎制2分钟，使表皮酥脆； 关火，起锅，改刀成鸡排条； 淋上喜欢的酱汁（如：黑椒、照烧等），也可跳过此步骤； ","date":"2020-02-13","objectID":"/posts/cook/%E9%A6%99%E7%85%8E%E8%84%86%E7%9A%AE%E9%B8%A1%E6%8E%92/:3:2","tags":["做饭"],"title":"香煎脆皮鸡排","uri":"/posts/cook/%E9%A6%99%E7%85%8E%E8%84%86%E7%9A%AE%E9%B8%A1%E6%8E%92/"},{"categories":["做饭"],"content":"成果 ","date":"2020-02-13","objectID":"/posts/cook/%E9%A6%99%E7%85%8E%E8%84%86%E7%9A%AE%E9%B8%A1%E6%8E%92/:4:0","tags":["做饭"],"title":"香煎脆皮鸡排","uri":"/posts/cook/%E9%A6%99%E7%85%8E%E8%84%86%E7%9A%AE%E9%B8%A1%E6%8E%92/"},{"categories":["做饭"],"content":"tips📌 鸡皮本身含有丰富的油脂，因此全程不需要额外的油； 用锡箔纸盖住是防止油飞溅，使受热均匀； ","date":"2020-02-13","objectID":"/posts/cook/%E9%A6%99%E7%85%8E%E8%84%86%E7%9A%AE%E9%B8%A1%E6%8E%92/:5:0","tags":["做饭"],"title":"香煎脆皮鸡排","uri":"/posts/cook/%E9%A6%99%E7%85%8E%E8%84%86%E7%9A%AE%E9%B8%A1%E6%8E%92/"},{"categories":["做饭"],"content":"巨人肩膀 不放一点油 “脆皮鸡排”，制作简单一学就会，基本零失败-厨师长农国栋 ","date":"2020-02-13","objectID":"/posts/cook/%E9%A6%99%E7%85%8E%E8%84%86%E7%9A%AE%E9%B8%A1%E6%8E%92/:6:0","tags":["做饭"],"title":"香煎脆皮鸡排","uri":"/posts/cook/%E9%A6%99%E7%85%8E%E8%84%86%E7%9A%AE%E9%B8%A1%E6%8E%92/"},{"categories":["blog"],"content":"Github操作 ","date":"2020-02-12","objectID":"/posts/blog/%E4%BD%BF%E7%94%A8github%E5%92%8Cpicgo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/:1:0","tags":["blog"],"title":"使用GitHub和PicGo搭建个人图床","uri":"/posts/blog/%E4%BD%BF%E7%94%A8github%E5%92%8Cpicgo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/"},{"categories":["blog"],"content":"新建repository作为图床地址 ","date":"2020-02-12","objectID":"/posts/blog/%E4%BD%BF%E7%94%A8github%E5%92%8Cpicgo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/:1:1","tags":["blog"],"title":"使用GitHub和PicGo搭建个人图床","uri":"/posts/blog/%E4%BD%BF%E7%94%A8github%E5%92%8Cpicgo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/"},{"categories":["blog"],"content":"创建token 访问 https://github.com/settings/tokens，点击Generate new token； 把 repo 的勾打上即可。然后翻到页面最底部，点击 Generate token 的绿色按钮生成 token； 复制生成的token； ","date":"2020-02-12","objectID":"/posts/blog/%E4%BD%BF%E7%94%A8github%E5%92%8Cpicgo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/:1:2","tags":["blog"],"title":"使用GitHub和PicGo搭建个人图床","uri":"/posts/blog/%E4%BD%BF%E7%94%A8github%E5%92%8Cpicgo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/"},{"categories":["blog"],"content":"PicGo配置 ","date":"2020-02-12","objectID":"/posts/blog/%E4%BD%BF%E7%94%A8github%E5%92%8Cpicgo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/:2:0","tags":["blog"],"title":"使用GitHub和PicGo搭建个人图床","uri":"/posts/blog/%E4%BD%BF%E7%94%A8github%E5%92%8Cpicgo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/"},{"categories":["blog"],"content":"安装 从PicGo官方下载最新版本； 使用jsDelivr进行CDN加速，设置自定义域名如下https://cdn.jsdelivr.net/gh/uyaki/pic-cloud； 完整配置如下: ","date":"2020-02-12","objectID":"/posts/blog/%E4%BD%BF%E7%94%A8github%E5%92%8Cpicgo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/:2:1","tags":["blog"],"title":"使用GitHub和PicGo搭建个人图床","uri":"/posts/blog/%E4%BD%BF%E7%94%A8github%E5%92%8Cpicgo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/"},{"categories":["blog"],"content":"使用 截图 使用全局快捷键command+shift+P上传到配置好的图床； 等待上传完成，自动复制到剪切板； ","date":"2020-02-12","objectID":"/posts/blog/%E4%BD%BF%E7%94%A8github%E5%92%8Cpicgo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/:2:2","tags":["blog"],"title":"使用GitHub和PicGo搭建个人图床","uri":"/posts/blog/%E4%BD%BF%E7%94%A8github%E5%92%8Cpicgo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/"},{"categories":["blog"],"content":"巨人肩膀 PicGo Github地址 PicGo中文使用文档 jsDelivr官网 ","date":"2020-02-12","objectID":"/posts/blog/%E4%BD%BF%E7%94%A8github%E5%92%8Cpicgo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/:3:0","tags":["blog"],"title":"使用GitHub和PicGo搭建个人图床","uri":"/posts/blog/%E4%BD%BF%E7%94%A8github%E5%92%8Cpicgo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/"},{"categories":["中间件"],"content":"核心配置 添加下面的代码到.spacemacs或~/.spacemacs/init.el 的dotspacemacs/user-init()下 (setq configuration-layer-elpa-archives '((\"melpa-cn\" . \"http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/\") (\"org-cn\" . \"http://mirrors.tuna.tsinghua.edu.cn/elpa/org/\") (\"gnu-cn\" . \"http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/\"))) ","date":"2020-02-11","objectID":"/posts/middleware/spacemacs%E6%B8%85%E5%8D%8E%E6%BA%90%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F/:1:0","tags":["中间件","加速"],"title":"Spacemacs清华源镜像加速","uri":"/posts/middleware/spacemacs%E6%B8%85%E5%8D%8E%E6%BA%90%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F/"},{"categories":["中间件"],"content":"巨人肩膀 清华镜像源elpa使用帮助 ","date":"2020-02-11","objectID":"/posts/middleware/spacemacs%E6%B8%85%E5%8D%8E%E6%BA%90%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F/:2:0","tags":["中间件","加速"],"title":"Spacemacs清华源镜像加速","uri":"/posts/middleware/spacemacs%E6%B8%85%E5%8D%8E%E6%BA%90%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F/"},{"categories":["git"],"content":" cd 到项目路径 执行 $ find . -name .DS_Store -print0 | xargs -0 git rm -f --ignore-unmatch 插入到.gitignore $ echo .DS_Store \u003e\u003e .gitignore git push ","date":"2020-02-11","objectID":"/posts/git/git%E5%88%A0%E9%99%A4.ds_store/:0:0","tags":["git"],"title":"Git删除 .DS_Store","uri":"/posts/git/git%E5%88%A0%E9%99%A4.ds_store/"},{"categories":["git"],"content":" $ git commit --allow-empty -m \"chore: touch ops build\" ","date":"2020-02-11","objectID":"/posts/git/git%E7%A9%BA%E6%8F%90%E4%BA%A4/:0:0","tags":["git"],"title":"Git空提交","uri":"/posts/git/git%E7%A9%BA%E6%8F%90%E4%BA%A4/"},{"categories":["macOS"],"content":" ## 安装macvim brew install macvim ## 编辑配置文件 vim ~/.zshrc ## 添加 alias vi=vim alias vim=mvim alias mvim='/usr/local/bin/mvim -v' ## 生效 source ~/.zshrc ","date":"2020-02-11","objectID":"/posts/mac/macos%E4%BD%BF%E7%94%A8macvim%E6%9B%BF%E4%BB%A3vim/:0:0","tags":["macOS"],"title":"MacOS使用MacVim替代vim","uri":"/posts/mac/macos%E4%BD%BF%E7%94%A8macvim%E6%9B%BF%E4%BB%A3vim/"},{"categories":["docker"],"content":" $ sudo mkdir -p /etc/docker $ sudo tee /etc/docker/daemon.json \u003c\u003c-'EOF' { \"registry-mirrors\": [\"https://28ffkr6d.mirror.aliyuncs.com\"] } EOF $ sudo systemctl daemon-reload $ sudo systemctl restart docker ","date":"2020-02-11","objectID":"/posts/docker/docker%E5%88%87%E6%8D%A2%E9%95%9C%E5%83%8F%E6%BA%90/:0:0","tags":["docker"],"title":"Docker切换镜像源","uri":"/posts/docker/docker%E5%88%87%E6%8D%A2%E9%95%9C%E5%83%8F%E6%BA%90/"},{"categories":["macOS"],"content":"安装 ","date":"2020-02-11","objectID":"/posts/mac/macos%E5%9C%A8iterm%E4%B8%AD%E4%BD%BF%E7%94%A8rzsz%E4%BB%8E%E8%BF%9C%E7%A8%8B%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/:1:0","tags":["macOS"],"title":"MacOS在iTerm中使用rz、sz从远程上传下载文件","uri":"/posts/mac/macos%E5%9C%A8iterm%E4%B8%AD%E4%BD%BF%E7%94%A8rzsz%E4%BB%8E%E8%BF%9C%E7%A8%8B%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/"},{"categories":["macOS"],"content":"下载安装lrzsz，创建软连接（mac） sudo brew install lrzsz ln -s /usr/local/Cellar/lrzsz/0.12.20/bin/sz ln -s /usr/local/Cellar/lrzsz/0.12.20/bin/rz 说明：lrzsz在本地和远程主机均要安装！ ","date":"2020-02-11","objectID":"/posts/mac/macos%E5%9C%A8iterm%E4%B8%AD%E4%BD%BF%E7%94%A8rzsz%E4%BB%8E%E8%BF%9C%E7%A8%8B%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/:1:1","tags":["macOS"],"title":"MacOS在iTerm中使用rz、sz从远程上传下载文件","uri":"/posts/mac/macos%E5%9C%A8iterm%E4%B8%AD%E4%BD%BF%E7%94%A8rzsz%E4%BB%8E%E8%BF%9C%E7%A8%8B%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/"},{"categories":["macOS"],"content":"下载并安装automatic zmoderm for iTerm2 cd usr/local/bin sudo wget https://raw.github.com/mmastrac/iterm2-zmodem/master/iterm2-send-zmodem.sh sudo wget https://raw.github.com/mmastrac/iterm2-zmodem/master/iterm2-recv-zmodem.sh sudo chmod 777 /usr/local/bin/iterm2-* 脚本地址：https://github.com/mmastrac/iterm2-zmodem ","date":"2020-02-11","objectID":"/posts/mac/macos%E5%9C%A8iterm%E4%B8%AD%E4%BD%BF%E7%94%A8rzsz%E4%BB%8E%E8%BF%9C%E7%A8%8B%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/:1:2","tags":["macOS"],"title":"MacOS在iTerm中使用rz、sz从远程上传下载文件","uri":"/posts/mac/macos%E5%9C%A8iterm%E4%B8%AD%E4%BD%BF%E7%94%A8rzsz%E4%BB%8E%E8%BF%9C%E7%A8%8B%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/"},{"categories":["macOS"],"content":"添加iTerm2 trigger iTerm2 –\u003e Profiles –\u003e Open Profiles –\u003e Edit Profiles –\u003e Advanced –\u003e Edit Trigger 配置项： Regular expression Action Parameters \\*\\*B0100 Run Silent Coprocess /usr/local/bin/iterm2-send-zmodem.sh \\*\\*B00000000000000 Run Silent Coprocess /usr/local/bin/iterm2-recv-zmodem.sh ","date":"2020-02-11","objectID":"/posts/mac/macos%E5%9C%A8iterm%E4%B8%AD%E4%BD%BF%E7%94%A8rzsz%E4%BB%8E%E8%BF%9C%E7%A8%8B%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/:1:3","tags":["macOS"],"title":"MacOS在iTerm中使用rz、sz从远程上传下载文件","uri":"/posts/mac/macos%E5%9C%A8iterm%E4%B8%AD%E4%BD%BF%E7%94%A8rzsz%E4%BB%8E%E8%BF%9C%E7%A8%8B%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/"},{"categories":["macOS"],"content":"使用方法 ","date":"2020-02-11","objectID":"/posts/mac/macos%E5%9C%A8iterm%E4%B8%AD%E4%BD%BF%E7%94%A8rzsz%E4%BB%8E%E8%BF%9C%E7%A8%8B%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/:2:0","tags":["macOS"],"title":"MacOS在iTerm中使用rz、sz从远程上传下载文件","uri":"/posts/mac/macos%E5%9C%A8iterm%E4%B8%AD%E4%BD%BF%E7%94%A8rzsz%E4%BB%8E%E8%BF%9C%E7%A8%8B%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/"},{"categories":["macOS"],"content":"将文件传到远端服务器 在远端服务器上输入 rz ，回车； 选择本地要上传的文件； 等待上传； ","date":"2020-02-11","objectID":"/posts/mac/macos%E5%9C%A8iterm%E4%B8%AD%E4%BD%BF%E7%94%A8rzsz%E4%BB%8E%E8%BF%9C%E7%A8%8B%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/:2:1","tags":["macOS"],"title":"MacOS在iTerm中使用rz、sz从远程上传下载文件","uri":"/posts/mac/macos%E5%9C%A8iterm%E4%B8%AD%E4%BD%BF%E7%94%A8rzsz%E4%BB%8E%E8%BF%9C%E7%A8%8B%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/"},{"categories":["macOS"],"content":"从远端服务器下载文件 在远端服务器输入sz filename filename1 … filenameN； 选择本地的存储目录； 等待下载； ","date":"2020-02-11","objectID":"/posts/mac/macos%E5%9C%A8iterm%E4%B8%AD%E4%BD%BF%E7%94%A8rzsz%E4%BB%8E%E8%BF%9C%E7%A8%8B%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/:2:2","tags":["macOS"],"title":"MacOS在iTerm中使用rz、sz从远程上传下载文件","uri":"/posts/mac/macos%E5%9C%A8iterm%E4%B8%AD%E4%BD%BF%E7%94%A8rzsz%E4%BB%8E%E8%BF%9C%E7%A8%8B%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/"},{"categories":["server"],"content":"方式一： 修改pem权限； sudo chmod 600 key.pem Mac OS 连接服务器使用 PEM 文件； ssh -i key.pem root@IP ","date":"2020-02-11","objectID":"/posts/server/ssh%E4%BD%BF%E7%94%A8pem%E6%96%87%E4%BB%B6%E8%BF%9C%E7%A8%8B%E7%99%BB%E9%99%86/:1:0","tags":["server"],"title":"SSH使用pem文件远程登陆","uri":"/posts/server/ssh%E4%BD%BF%E7%94%A8pem%E6%96%87%E4%BB%B6%E8%BF%9C%E7%A8%8B%E7%99%BB%E9%99%86/"},{"categories":["server"],"content":"方式二（Mac重启后失效）： 使用ssh-add添加key文件； ssh-add -k key.pem 登陆； ssh root@IP ssh -p xxxx root@IP ","date":"2020-02-11","objectID":"/posts/server/ssh%E4%BD%BF%E7%94%A8pem%E6%96%87%E4%BB%B6%E8%BF%9C%E7%A8%8B%E7%99%BB%E9%99%86/:2:0","tags":["server"],"title":"SSH使用pem文件远程登陆","uri":"/posts/server/ssh%E4%BD%BF%E7%94%A8pem%E6%96%87%E4%BB%B6%E8%BF%9C%E7%A8%8B%E7%99%BB%E9%99%86/"},{"categories":["git"],"content":"Git支持的协议 https协议，https://协议需要配置git的http.proxy参数 ssh协议，ssh://协议需要配置ssh的ProxyCommand参数 ","date":"2020-02-11","objectID":"/posts/git/git%E5%8A%A0%E9%80%9F%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/:1:0","tags":["git","加速"],"title":"Git加速最佳实践","uri":"/posts/git/git%E5%8A%A0%E9%80%9F%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"},{"categories":["git"],"content":"针对HTTPS协议配置代理 ","date":"2020-02-11","objectID":"/posts/git/git%E5%8A%A0%E9%80%9F%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/:2:0","tags":["git","加速"],"title":"Git加速最佳实践","uri":"/posts/git/git%E5%8A%A0%E9%80%9F%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"},{"categories":["git"],"content":"通过命令方式 针对所有git服务器设置代理（这里演示使用socks5端口） $ git config --global http.proxy=socks5://127.0.0.1:1086 $ git config --global https.proxy=socks5://127.0.0.1:1086 只针对github.com设置代理（这里演示使用http端口） $ git config --global http.https://github.com.proxy http://127.0.0.1:1087 如果代理需要账号密码 $ git config --global http.proxy http://\u003cproxyuser\u003e:\u003cproxypwd\u003e@\u003cproxy.server.com\u003e:\u003cproxy.server.port\u003e ","date":"2020-02-11","objectID":"/posts/git/git%E5%8A%A0%E9%80%9F%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/:2:1","tags":["git","加速"],"title":"Git加速最佳实践","uri":"/posts/git/git%E5%8A%A0%E9%80%9F%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"},{"categories":["git"],"content":"通过编辑git配置文件的方式 $ vim ~/.gitconfig [http] proxy = socks5://127.0.0.1:1086 [https] proxy = socks5://127.0.0.1:1086 ","date":"2020-02-11","objectID":"/posts/git/git%E5%8A%A0%E9%80%9F%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/:2:2","tags":["git","加速"],"title":"Git加速最佳实践","uri":"/posts/git/git%E5%8A%A0%E9%80%9F%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"},{"categories":["git"],"content":"针对ssh协议配置代理 安装connect，connect是一个工具，用户代理的转换。 macOS安装方式： $ brew install connect ProxyCommand命令设置 $ vim ~/.ssh/config Host github.com .github.com ProxyCommand connect -H 127.0.0.1:1087 %h %p #设置http代理 HostName %h Port 22 User git IdentityFile ~/.ssh/id_rsa # 这里是私钥，不要放成公钥啦 IdentitiesOnly yes 测试 $ ssh -T git@github.com Hi username! You ve successfully authenticated, but GitHub does not provide shell access. ","date":"2020-02-11","objectID":"/posts/git/git%E5%8A%A0%E9%80%9F%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/:3:0","tags":["git","加速"],"title":"Git加速最佳实践","uri":"/posts/git/git%E5%8A%A0%E9%80%9F%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"},{"categories":["git"],"content":"tips📌 ","date":"2020-02-11","objectID":"/posts/git/git%E5%8A%A0%E9%80%9F%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/:4:0","tags":["git","加速"],"title":"Git加速最佳实践","uri":"/posts/git/git%E5%8A%A0%E9%80%9F%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"},{"categories":["git"],"content":"取消代理 $ git config --global --unset http.proxy $ git config --global --unset https.proxy ","date":"2020-02-11","objectID":"/posts/git/git%E5%8A%A0%E9%80%9F%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/:4:1","tags":["git","加速"],"title":"Git加速最佳实践","uri":"/posts/git/git%E5%8A%A0%E9%80%9F%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"},{"categories":["git"],"content":"查看当前代理 $ git config --global --get http.proxy $ git config --global --get https.proxy ","date":"2020-02-11","objectID":"/posts/git/git%E5%8A%A0%E9%80%9F%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/:4:2","tags":["git","加速"],"title":"Git加速最佳实践","uri":"/posts/git/git%E5%8A%A0%E9%80%9F%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"},{"categories":["git"],"content":"查看所有git全局配置 $ git config --global -l ","date":"2020-02-11","objectID":"/posts/git/git%E5%8A%A0%E9%80%9F%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/:4:3","tags":["git","加速"],"title":"Git加速最佳实践","uri":"/posts/git/git%E5%8A%A0%E9%80%9F%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"},{"categories":["git"],"content":"巨人的肩膀 https://www.hi-linux.com/posts/11850.html ","date":"2020-02-11","objectID":"/posts/git/git%E5%8A%A0%E9%80%9F%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/:5:0","tags":["git","加速"],"title":"Git加速最佳实践","uri":"/posts/git/git%E5%8A%A0%E9%80%9F%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"},{"categories":["做饭"],"content":"华夫饼🧇 ","date":"2020-02-08","objectID":"/posts/cook/%E5%8D%8E%E5%A4%AB%E9%A5%BC/:0:0","tags":["做饭"],"title":"华夫饼","uri":"/posts/cook/%E5%8D%8E%E5%A4%AB%E9%A5%BC/"},{"categories":["做饭"],"content":"工具 必须 打蛋器（手动电动均可） 打蛋桶 电饼铛 电子秤 刷子 烘培夹子 非必须 面粉筛 ","date":"2020-02-08","objectID":"/posts/cook/%E5%8D%8E%E5%A4%AB%E9%A5%BC/:1:0","tags":["做饭"],"title":"华夫饼","uri":"/posts/cook/%E5%8D%8E%E5%A4%AB%E9%A5%BC/"},{"categories":["做饭"],"content":"食材 份量：大概6张华夫饼，按实际情况增减 必须 鸡蛋🥚 3个 白砂糖🧂 60g 纯牛奶🥛 100g 低筋面粉 160g 玉米淀粉 40g 泡打粉 3g 黄油 30g（按个人口味决定油腻程度） 植物油 适量 非必须 巧克力（增加风味） 糖霜/粉（装饰） 水果：🍓、🍒、蓝莓等（点缀） ","date":"2020-02-08","objectID":"/posts/cook/%E5%8D%8E%E5%A4%AB%E9%A5%BC/:2:0","tags":["做饭"],"title":"华夫饼","uri":"/posts/cook/%E5%8D%8E%E5%A4%AB%E9%A5%BC/"},{"categories":["做饭"],"content":"步骤 ","date":"2020-02-08","objectID":"/posts/cook/%E5%8D%8E%E5%A4%AB%E9%A5%BC/:3:0","tags":["做饭"],"title":"华夫饼","uri":"/posts/cook/%E5%8D%8E%E5%A4%AB%E9%A5%BC/"},{"categories":["做饭"],"content":"准备 面浆 打蛋桶中打入鸡蛋，倒入白砂糖🧂，搅拌均匀； 倒入纯牛奶，搅拌均匀； 倒入低筋面粉，玉米淀粉，泡打粉，搅拌均匀； 黄油隔水融化，倒入，搅拌均匀； ","date":"2020-02-08","objectID":"/posts/cook/%E5%8D%8E%E5%A4%AB%E9%A5%BC/:3:1","tags":["做饭"],"title":"华夫饼","uri":"/posts/cook/%E5%8D%8E%E5%A4%AB%E9%A5%BC/"},{"categories":["做饭"],"content":"制作 电饼铛预热2分钟； 在上下烤盘上都刷上一层油； 倒入准备好的面浆，均匀铺满底盘； 压上上盖，等待烤制完成（约4分钟⏳）； 用夹子取出； 重复步骤2～5； 装盘🍽，用面粉筛撒上糖霜，摆上水果； ","date":"2020-02-08","objectID":"/posts/cook/%E5%8D%8E%E5%A4%AB%E9%A5%BC/:3:2","tags":["做饭"],"title":"华夫饼","uri":"/posts/cook/%E5%8D%8E%E5%A4%AB%E9%A5%BC/"},{"categories":["做饭"],"content":"成果 ","date":"2020-02-08","objectID":"/posts/cook/%E5%8D%8E%E5%A4%AB%E9%A5%BC/:4:0","tags":["做饭"],"title":"华夫饼","uri":"/posts/cook/%E5%8D%8E%E5%A4%AB%E9%A5%BC/"},{"categories":["做饭"],"content":"📌tips 面浆只需要搅拌均匀皆可； 刚制作完的华夫饼很烫，注意不要被烫伤； ","date":"2020-02-08","objectID":"/posts/cook/%E5%8D%8E%E5%A4%AB%E9%A5%BC/:5:0","tags":["做饭"],"title":"华夫饼","uri":"/posts/cook/%E5%8D%8E%E5%A4%AB%E9%A5%BC/"},{"categories":["blog"],"content":"使用 Hugo 搭建博客 ","date":"2020-02-06","objectID":"/posts/blog/hugo%E6%90%AD%E5%BB%BA/:0:0","tags":["blog"],"title":"Hugo搭建","uri":"/posts/blog/hugo%E6%90%AD%E5%BB%BA/"},{"categories":["blog"],"content":"hugo 安装 依赖： Git Mercurial Go Mac 下直接使用 Homebrew 安装： $ brew install hugo ","date":"2020-02-06","objectID":"/posts/blog/hugo%E6%90%AD%E5%BB%BA/:1:0","tags":["blog"],"title":"Hugo搭建","uri":"/posts/blog/hugo%E6%90%AD%E5%BB%BA/"},{"categories":["blog"],"content":"github仓库准备 create new repositories =\u003e blog ，用来存放网站内容和源文件； create new repositories =\u003e \u003cusername\u003e.github.io ，用于存放最终发布的网站内容； ","date":"2020-02-06","objectID":"/posts/blog/hugo%E6%90%AD%E5%BB%BA/:2:0","tags":["blog"],"title":"Hugo搭建","uri":"/posts/blog/hugo%E6%90%AD%E5%BB%BA/"},{"categories":["blog"],"content":"生成站点 使用 Hugo 快速生成站点 $ hugo new site /path/to/site ## 如我的项目名叫blog $ hugo new site blog cd 到 站点文件夹 $ cd blog $ tree -d -L 1 . ├── archetypes ├── content ├── data ├── layouts ├── resources ├── static └── themes archetypes 使用 hugu new post 生成新文章的模板，可以自定义里面的值 content 存放网站内容 data 存储 Hugo 在生成您的网站时可以使用的配置文件 layouts 以.html 文件的形式存储模板，指定如何将内容的视图呈现到静态网站中 static 存储所有静态内容：图像，CSS，JavaScript 等，当 Hugo 构建您的站点时，静态目录中的所有资产都将按原样复制 themes 存放主题 config.toml 配置文件 ","date":"2020-02-06","objectID":"/posts/blog/hugo%E6%90%AD%E5%BB%BA/:3:0","tags":["blog"],"title":"Hugo搭建","uri":"/posts/blog/hugo%E6%90%AD%E5%BB%BA/"},{"categories":["blog"],"content":"添加主题 到hugo-theme-even下fork项目 ## 初始化 $ git init ## 关联远程 blog 仓库 $ git remote add origin git@github.com:uyaki/blog.git $ git submodule add https://github.com/uyaki/hugo-theme-even.git themes/even 下载完后，找到主题目录 /themes/even/exampleSite 下的配置文件 config.toml，将该文件复制到根目录下，替换根目录的 config.toml，根据需求更改配置文件即可。 ","date":"2020-02-06","objectID":"/posts/blog/hugo%E6%90%AD%E5%BB%BA/:4:0","tags":["blog"],"title":"Hugo搭建","uri":"/posts/blog/hugo%E6%90%AD%E5%BB%BA/"},{"categories":["blog"],"content":"启动hugo服务 $ hugo server -D ","date":"2020-02-06","objectID":"/posts/blog/hugo%E6%90%AD%E5%BB%BA/:5:0","tags":["blog"],"title":"Hugo搭建","uri":"/posts/blog/hugo%E6%90%AD%E5%BB%BA/"},{"categories":["blog"],"content":"创建 public 子模块 $ git submodule add -f git@github.com:uyaki/uyaki.github.io.git public ","date":"2020-02-06","objectID":"/posts/blog/hugo%E6%90%AD%E5%BB%BA/:6:0","tags":["blog"],"title":"Hugo搭建","uri":"/posts/blog/hugo%E6%90%AD%E5%BB%BA/"},{"categories":["blog"],"content":"生成最终发布的网站内容 $ hugo ","date":"2020-02-06","objectID":"/posts/blog/hugo%E6%90%AD%E5%BB%BA/:7:0","tags":["blog"],"title":"Hugo搭建","uri":"/posts/blog/hugo%E6%90%AD%E5%BB%BA/"},{"categories":["blog"],"content":"推送到远程.github.io $ cd public $ git status $ git add . $ git commit -m \"first commit\" $ git push -u orgin master ","date":"2020-02-06","objectID":"/posts/blog/hugo%E6%90%AD%E5%BB%BA/:8:0","tags":["blog"],"title":"Hugo搭建","uri":"/posts/blog/hugo%E6%90%AD%E5%BB%BA/"},{"categories":["blog"],"content":"推送到远程blog $ cd .. $ vim .gitignore 添加如下内容 # Created by .ignore support plugin (hsz.mobi) ### macOS template # General .DS_Store .AppleDouble .LSOverride # Icon must end with two \\r Icon # Thumbnails ._* # Files that might appear in the root of a volume .DocumentRevisions-V100 .fseventsd .Spotlight-V100 .TemporaryItems .Trashes .VolumeIcon.icns .com.apple.timemachine.donotpresent # Directories potentially created on remote AFP share .AppleDB .AppleDesktop Network Trash Folder Temporary Items .apdisk ### Hugo template # Generated files by hugo /public/ /resources/_gen/ # Executable may be added to repository hugo.exe hugo.darwin hugo.linux ","date":"2020-02-06","objectID":"/posts/blog/hugo%E6%90%AD%E5%BB%BA/:9:0","tags":["blog"],"title":"Hugo搭建","uri":"/posts/blog/hugo%E6%90%AD%E5%BB%BA/"},{"categories":["blog"],"content":"自动部署脚本 将以上步骤添加到自动执行脚本中 deploy.sh，脚本 commit 提交信息会使用执行时的时间，将脚本放到网站项目路径下，写完博客后，双击运行即可自动部署发布 #!/bin/bash echo -e \"\\033[0;32mDeploying updates to GitHub...\\033[0m\" # Build the project. hugo # if using a theme, replace with `hugo -t \u003cYOURTHEME\u003e` # Go To Public folder cd public # Add changes to git. git add . # Commit changes. msg=\"rebuilding site `date`\" if [ $# -eq 1 ] then msg=\"$1\" fi git commit -m \"$msg\" # Push source and build repos. git push origin master # Come Back up to the Project Root cd .. ","date":"2020-02-06","objectID":"/posts/blog/hugo%E6%90%AD%E5%BB%BA/:10:0","tags":["blog"],"title":"Hugo搭建","uri":"/posts/blog/hugo%E6%90%AD%E5%BB%BA/"},{"categories":["blog"],"content":"支持评论 Hugo 支持 Disqus 评论，只需要在配置文件 config.toml 中设置 disqusShortname = “disqusShortname”，如果没有 disqusShortname，需要到 Disqus 官网注册一个账号，注册后添加一个网站，添加时会让填一个 shortname，Disqus 会生成一个 shortname.disqus.com 的网址，另外还需要把 config.toml 中的 baseURL 地址，也就是公网访问地址添加到 Diqus 的信任网址中，类似于互相添加信任 ","date":"2020-02-06","objectID":"/posts/blog/hugo%E6%90%AD%E5%BB%BA/:11:0","tags":["blog"],"title":"Hugo搭建","uri":"/posts/blog/hugo%E6%90%AD%E5%BB%BA/"}]